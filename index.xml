<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Nansen Li</title>
        <link>https://example.org/</link>
        <description>Recent content on Nansen Li</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Thu, 10 Apr 2025 18:12:52 +0000</lastBuildDate><atom:link href="https://example.org/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Incomplete Guide to Studying in Ireland</title>
        <link>https://example.org/post/2025/04/ireland-study-guide/</link>
        <pubDate>Thu, 10 Apr 2025 18:12:52 +0000</pubDate>
        
        <guid>https://example.org/post/2025/04/ireland-study-guide/</guid>
        <description>&lt;p&gt;This isn&amp;rsquo;t really a comprehensive guide, just some personal supplementary information to Chen He&amp;rsquo;s content.&lt;/p&gt;
&lt;p&gt;Chen He&amp;rsquo;s link: &lt;a class=&#34;link&#34; href=&#34;https://chenhe.me/post/ireland&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://chenhe.me/post/ireland&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Chen He&amp;rsquo;s content is excellent and detailed, basically answering many of my initial questions about coming to Ireland.&lt;/p&gt;
&lt;p&gt;The article is incomplete and will be updated periodically.&lt;/p&gt;
&lt;h1 id=&#34;background&#34;&gt;Background
&lt;/h1&gt;&lt;p&gt;Location is in Dublin, admitted to DCU.&lt;/p&gt;
&lt;h2 id=&#34;before-departure&#34;&gt;Before Departure
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Let me specify the model directly: Supor Little Green Pressure Cooker. Why this specific one and not others? Because: 1. Pressure-cooked rice tastes better. 2. It&amp;rsquo;s more convenient for stewing dishes like beef brisket or braised chicken legs. I also brought a Xiaomi rice cooker, but found that the rice cooked in it wasn&amp;rsquo;t as tasty - only pressure-cooked rice tastes goodðŸ˜‹. Also, this model seems to be the only one that can cook rice in just 10 minutes under pressure. Looking at other models, none were this fast, possibly due to its smaller capacity.&lt;/li&gt;
&lt;li&gt;Medications: Strongly recommend bringing Gan Kang (cold medicine) - one pill makes you feel much better when you have a cold. Also bring some transparent waterproof band-aids.&lt;/li&gt;
&lt;li&gt;Water bottle: After arriving, I found it difficult to buy a water bottle I liked. If you&amp;rsquo;re still in China, it&amp;rsquo;s important to buy a suitable water bottle from Taobao.&lt;/li&gt;
&lt;li&gt;Xiaohongshu: Previously thought it was just a beauty app, barely used it in China. After going abroad, I discovered it&amp;rsquo;s actually an overseas life app. There are many guides on the following topics on Xiaohongshu, you can browse as needed. Of course, some people dislike it and look down upon it - to each their own (don&amp;rsquo;t hit me, Chen He).&lt;/li&gt;
&lt;li&gt;Driver&amp;rsquo;s license: I brought mine, but it expired after arrival, so I haven&amp;rsquo;t used it much. If it&amp;rsquo;s still valid, it can reduce the time needed for getting a license here.&lt;/li&gt;
&lt;li&gt;Cash: Actually, you don&amp;rsquo;t need to exchange too much Euro. Having a dual-currency credit card like Visa or Mastercard set up in China is sufficient - you can use it directly here. Cash transactions are relatively rare here.&lt;/li&gt;
&lt;li&gt;Clothes: Recommend bringing layered clothing. Due to the variable weather and large temperature differences between indoor and outdoor, you might need to frequently add or remove layers. Winters are quite cold, you can bring two down jackets or similar thickness coats to alternate.&lt;/li&gt;
&lt;li&gt;Luggage: Hainan Airlines allows student verification, permitting up to two 28-inch suitcases. However, that was too much for me - I ended up bringing one 20-inch and one 28-inch. Also, a 28-inch suitcase can easily exceed weight limits when full. A 26-inch would also work.&lt;/li&gt;
&lt;li&gt;Medical check-ups, dental work, surgeries, etc.: These are expensive here, try to get them done in China. Things like dental fillings or laser surgeries.&lt;/li&gt;
&lt;li&gt;Power adapters: A high-quality power adapter will be very convenient. Consider preparing some simple adapters and buying one with multiple charging ports. Also consider purchasing a special power strip that has a UK standard plug but Chinese standard sockets.&lt;/li&gt;
&lt;li&gt;Living expenses: Rent might be â‚¬600-1200, if you cook your own meals, food costs about â‚¬500 per month, total living expenses might be â‚¬1000-1800 per month, depending on personal spending habits.&lt;/li&gt;
&lt;li&gt;Flights: Hainan Airlines&amp;rsquo; direct flights to Dublin are good, especially if you transit through Shanghai rather than flying from Beijing - the tickets are cheaper. So taking an extra flight actually saves money.&lt;/li&gt;
&lt;li&gt;Temporary accommodation: Can be booked on Airbnb or Booking.&lt;/li&gt;
&lt;li&gt;Chinese cooking ingredients: After arriving, you&amp;rsquo;ll find that a large part of daily life is grocery shopping and cooking. However, basically all seasonings are available at local Chinese supermarkets, so you don&amp;rsquo;t need to bring too many seasonings. For a specific list of items sold, you can search the Rong Xing Hang WeChat mini-program &amp;ldquo;353 Gou&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;immigration&#34;&gt;Immigration
&lt;/h1&gt;&lt;p&gt;Just show the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Passport&lt;/li&gt;
&lt;li&gt;Insurance&lt;/li&gt;
&lt;li&gt;Admission letter&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;after-arriving-in-ireland&#34;&gt;After Arriving in Ireland
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Arrive at accommodation: Just hail a taxi at the airport.&lt;/li&gt;
&lt;li&gt;Get a phone card: You can get a student plan, â‚¬20 for unlimited data. I got &lt;strong&gt;Vodafone&lt;/strong&gt;. Remember to set up automatic 20-day top-up, otherwise you&amp;rsquo;ll need to manually top up each time.&lt;/li&gt;
&lt;li&gt;Get a transit card: First get an adult card, then exchange it for a student card in the city center. Student cards are half price. You can then cancel the adult card on the website and get a refund.&lt;/li&gt;
&lt;li&gt;Apply for IRP (Irish Residence Permit): Book in advance, if you wait until September when school starts, you&amp;rsquo;ll be queuing until November. With IRP, you can leave Ireland, like going back home or visiting the UK or Europe.&lt;/li&gt;
&lt;li&gt;Apply for a bank card: Can be done through AIB, no need to visit in person, can be done via phone. Requires student ID, student bank cards are free of annual fees. Apply for the bank card early, as the address proof it provides is important for other procedures.&lt;/li&gt;
&lt;li&gt;Apply for &lt;strong&gt;PPSN&lt;/strong&gt;: Although not always necessary, better to have it just in case. Get it done early. It&amp;rsquo;s needed for tax purposes if you find an internship. It&amp;rsquo;s also needed for driver&amp;rsquo;s license applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;payments&#34;&gt;Payments
&lt;/h1&gt;&lt;p&gt;Most daily scenarios use card payments - just tap your card on the wireless symbol to pay. You can also set up Apple Pay on your phone for payments.&lt;/p&gt;
&lt;h1 id=&#34;housing&#34;&gt;Housing
&lt;/h1&gt;&lt;p&gt;There are two apartments near DCU, highly recommended, on Shanowen Road: Shanowen Square and Shanowen Hall. Best to book several months in advance, otherwise there might not be available rooms. In the city center, Beckett House is also good, suitable for TCD students. Of course, if you get lucky with the school dorm lottery, that&amp;rsquo;s the best. In summary, prioritize school dorms, student apartments, then look for private rentals. As for homestays or living with landlords, it varies by person - for me, I&amp;rsquo;ve experienced it, not a nightmare but not a dream either, but having the experience is enough, I wouldn&amp;rsquo;t want to do it again. Some classmates said their homestay environment was good though.&lt;/p&gt;
&lt;h1 id=&#34;home-and-bedding&#34;&gt;Home and Bedding
&lt;/h1&gt;&lt;p&gt;You can order from IKEA, they&amp;rsquo;ll deliver to your room. But note that delivery times aren&amp;rsquo;t always accurate, might arrive the next day. Remember to use student discounts - I realized after checkout that there was a discount, contacted staff, and they helped cancel and re-settle the payment. Homebase also has good stuff, their electric heaters are great - dozens of euros for a large but light one, useful when heating stops at night in winter.&lt;/p&gt;
&lt;h1 id=&#34;pharmacies&#34;&gt;Pharmacies
&lt;/h1&gt;&lt;p&gt;Rarely visited pharmacies in China, but pharmacies here sell many things besides medicine, like cosmetics, health products, skincare, and bath products. Basically, Boots can handle everything. There&amp;rsquo;s a large Boots in the city center with a photo booth on the second floor, very versatile.&lt;/p&gt;
&lt;h1 id=&#34;dining&#34;&gt;Dining
&lt;/h1&gt;&lt;p&gt;Basically cook for yourself. You can buy ingredients from Rong Xing Hang Chinese supermarket in the city center. Rong Xing Hang&amp;rsquo;s mini-program offers city-wide delivery, free delivery for orders over â‚¬30 with the note &amp;ldquo;Rong Yi Life&amp;rdquo;, orders placed in the morning arrive in the afternoon, very convenient!!!&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t use other supermarkets much. There&amp;rsquo;s LIDL and Tesco near DCU with some fresh produce, I mainly use them for meat.&lt;/p&gt;
&lt;p&gt;As for meat, the pork here has such a strong smell. Basically haven&amp;rsquo;t eaten it. Only eat beef.&lt;/p&gt;
&lt;p&gt;LIDL&amp;rsquo;s Rib eye steak is quite good, well-marbled, â‚¬8+ for 400g, can last two meals. Also LIDL&amp;rsquo;s chicken legs with skin and bone are very cost-effective.&lt;/p&gt;
&lt;p&gt;Rong Xing Hang sells beef brisket, makes great stewed beef.&lt;/p&gt;
&lt;p&gt;The stoves here aren&amp;rsquo;t great to use, mostly electric ceramic hobs. Might need some time to get used to the heat levels.&lt;/p&gt;
&lt;h1 id=&#34;public-transit&#34;&gt;Public Transit
&lt;/h1&gt;&lt;p&gt;Ireland&amp;rsquo;s public transit system is well-developed, basically no need for taxis. TFI Live can show real-time arrival times for the next bus at any stop, more accurate than Google, very useful at stops without electronic displays, recommended to download and use. Mainly buses, occasionally Luas, Dart, etc.&lt;/p&gt;
&lt;h1 id=&#34;online-shopping&#34;&gt;Online Shopping
&lt;/h1&gt;&lt;p&gt;Recommend using Shein, free shipping above certain amounts. Usually takes about 10 days for delivery. Can buy daily necessities, etc. No food items.&lt;/p&gt;
&lt;p&gt;Also students can get free Amazon student membership for six months. Greatly reduces shipping costs.&lt;/p&gt;
&lt;p&gt;If not using Shein and wanting to shop like on Taobao, then use international shipping companies - air freight takes 10 days but shipping costs are extremely high, about 200-300 RMB for 2kg. Sea freight is cheaper, about 60-80 RMB for 2kg. So if you can buy daily necessities on Shein, try to buy there, shipping is free.&lt;/p&gt;
&lt;p&gt;Ochama has more comprehensive products, including various Chinese foods and some Jingzao products (JD&amp;rsquo;s European company), use invitation code (7WYM5K) at checkout for â‚¬10 off. But shipping is expensive, rarely used without discounts.&lt;/p&gt;
&lt;h1 id=&#34;clothing&#34;&gt;Clothing
&lt;/h1&gt;&lt;p&gt;Dundrum Town Centre in the south has lots of clothing stores. Henry St in the city center also has many clothing stores.&lt;/p&gt;
&lt;h1 id=&#34;domestic-travel&#34;&gt;Domestic Travel
&lt;/h1&gt;&lt;p&gt;If you&amp;rsquo;ve signed up for a language course (I did DCU&amp;rsquo;s 5-week language course, quite good, otherwise the start of school would be too overwhelming, it&amp;rsquo;s like getting to know the school in advance), July-August are good for traveling. Can visit Galway and Cork. But if you haven&amp;rsquo;t signed up for a language course and only arrive in September, the weather isn&amp;rsquo;t great, it gets cold and daylight hours decrease significantly, so September when school starts is okay for travel, but after October isn&amp;rsquo;t suitable. The next good time for travel would be after April next year, when daylight returns and temperatures rise.&lt;/p&gt;
&lt;h1 id=&#34;visas&#34;&gt;Visas
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Try to apply for UK visa in China, if applying in Ireland, they only give 6 months, but in China, they give 2 years. This makes it convenient whether going to Northern Ireland or the UK.&lt;/li&gt;
&lt;li&gt;Courses here are short. After winter break and second semester, there&amp;rsquo;s lots of free time. If you don&amp;rsquo;t have plans, it can be very boring. Especially in winter when daylight is short. Since visa applications here basically require using scalpers to queue, recommend starting visa applications right after arrival. To be safe, pick an embassy and start applying for visas. Make one round trip to the destination country during the visa period. This process will also cost lots of time and money, but there&amp;rsquo;s no way around it - to get a long-term Schengen visa, you need to accumulate entry/exit records. I applied for a French visa. Usually they issue visas for these durations: 1 month, 3 months, 6 months, 1 year, multiple years. Single or multiple entry doesn&amp;rsquo;t matter, as visas over 3 months are unlikely to be single entry.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;job-hunting&#34;&gt;Job Hunting
&lt;/h1&gt;&lt;p&gt;This is also crucial. Came here clueless, only got a clear understanding after arrival. This section will be updated after I complete the process since I&amp;rsquo;m still job hunting.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NG positions: Also known as campus recruitment positions, application period is September to November after arrival. Most NG positions close after November. So need to apply early. Regardless of skill level, recommend applying for NG positions. However, for those with over 2 years of experience, it&amp;rsquo;s difficult to get NG positions at big companies. But going through the process, if you get interviews, it&amp;rsquo;s good experience.&lt;/li&gt;
&lt;li&gt;Experienced positions: Application period starts in late April next year. Since I&amp;rsquo;m just starting to apply, I can&amp;rsquo;t really say much about it yet. Also, job hunting is somewhat up to fate. Many companies require you to have a 1G visa before they&amp;rsquo;ll even consider giving you an interview opportunity. If you apply too early, companies won&amp;rsquo;t process your application.&lt;/li&gt;
&lt;li&gt;Internship positions: These are hit or miss, since the master&amp;rsquo;s is only one year, many internship positions aren&amp;rsquo;t for us but for undergraduates. Can only say, try applying.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;contact&#34;&gt;Contact
&lt;/h1&gt;&lt;p&gt;If you have questions, you can also contact me through these channels.&lt;/p&gt;
&lt;p&gt;Xiaohongshu:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/C665F9BC-DFC8-427D-A955-F03D8BE9B6B4/D8B2F080-5BAA-4110-BB9A-2DD9795A6851_2/X2MSeHS8FahxCnpKs1sA8SxgUrd3zi6r7dC2ONIdk1Iz/Image.jpeg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Image.jpeg&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Whatsappï¼š&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/C665F9BC-DFC8-427D-A955-F03D8BE9B6B4/048B52B0-25F6-463B-80B9-B900BA913E51_2/oVWdi6ZdsJcJpjeyTnXSPs6UFbMEfx8mmy4ldxjJg3gz/Image.heic.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Image.heic.png&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Summary of LLM Tools Usage Experience</title>
        <link>https://example.org/post/2025/04/aitest/</link>
        <pubDate>Tue, 08 Apr 2025 19:47:48 +0000</pubDate>
        
        <guid>https://example.org/post/2025/04/aitest/</guid>
        <description>&lt;h1 id=&#34;chatgpt&#34;&gt;ChatGPT
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GPT-4o: Versatile. Excellent for daily communication and learning, with sufficient context window to easily handle code and document retrieval tasks. Supports multiple attachment formats and online code execution. Drawback: generates limited context length, not suitable for very long content. For lengthy conversations, context compression is severe and may forget earlier content.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Projects: Somewhat redundant. Suitable for scenarios requiring frequent searching and text retrieval across multiple files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GPT-4o mini: Weaker than GPT-4o, but has a massive context window, recommended for translating very long texts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;o1: A decent chain-of-thought model, suitable for solving complex code and mathematical problems. Not good at handling emotional or intuitive problems. However, the thought chain is too short and quality is not high. It&amp;rsquo;s recommended to use the output as input for Gemini-2.5pro or DeepSeek-R1 to optimize quality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;o3-mini: Severe hallucinations, inferior to o1, but extremely fast reasoning speed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Search: Slightly redundant. New version&amp;rsquo;s search results are heavily restricted, even inferior to model output without search. Suitable as a light search alternative.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deep Research: Excellent tool. Best quality among similar features, most comprehensive output results.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GPT-4.5-preview: Excellent. Massive context window, strong long-text comprehension. Has vast memory and strongest intuition. Not actually good at reasoning, but performs best due to low hallucinations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Canvas: Overall inferior to Cursor. Context output too small, text length limited. Suitable for short-text scenarios with real-time editing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work with Apps on macOS: Functionality experience crushed by Cursor, essentially a simplified version of Cursor.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;claude&#34;&gt;Claude
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Claude 3.7 Sonnet: Excellent, suitable for generating various code. Web version supports massive context, almost matching API&amp;rsquo;s context history message retention. Model very suitable for writing communication texts like emails, with accurate, concise, and unpretentious wording. Drawback: limited usage in free version.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;deepseek&#34;&gt;DeepSeek
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;R1: Severe hallucinations, unstable performance, occasionally affecting usability, requires very high quality prompts. When prompts are correct or context is complete, it outperforms o1. Can be used as input for o1&amp;rsquo;s output to optimize quality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;V3: Very excellent, alternative to GPT-4o.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;grok&#34;&gt;Grok
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Grok-3: Generates text fluently and naturally, less AI-like, suitable for natural writing and novel creation. Overall mediocre, fewer productivity tools than GPT-4o.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grok-3 + search: Excellent. Leverages English social media data, quickly analyzes news and current events. Outputs long content, barely filters search source content, stronger search capabilities than GPT-4o.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grok-Deep Search: Slightly redundant, actually inferior to Grok-3 + search. Generated content heavily templated, affecting quality.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;gemini&#34;&gt;Gemini
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2.5 Pro: Excellent model, alternative to GPT-4o, minimal hallucinations, high-quality search results, complete and clear thought chains, strong logical reasoning. Supports integration with Google tools, very useful in specific scenarios, such as uploading screenshots or text to automatically create events in Google Calendar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deep Research: Average, slightly better than old GPT Search. Occasional comprehension deviations, search and document generation executed in stages, process fragmented, heavily templated. Currently the only product that can replace GPT Deep Research.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;v0dev&#34;&gt;v0.dev
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Suitable for writing and previewing frontend components online.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;chatqwenai&#34;&gt;chat.qwen.ai
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Qwen2.5-Max: Very excellent model, alternative to GPT-4o, fast generation speed, supports thinking mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;zhihu-direct-answer&#34;&gt;Zhihu Direct Answer
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Supports searching Zhihu&amp;rsquo;s entire network content. Possible competitor is Xiaohongshu Direct Answer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;perplexity&#34;&gt;Perplexity
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Supports basic search, mediocre quality, slightly redundant.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;mistralai&#34;&gt;Mistral.ai
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Fast speed, large context window, alternative to GPT4o-mini.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;cursor&#34;&gt;Cursor
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Excellent tool. Can index entire code repositories, suitable for large project development. Supports multiple model switching, local command line execution and terminal takeover, suitable for the following tasks:
&lt;ul&gt;
&lt;li&gt;Writing LaTeX documents, replacing Overleaf&lt;/li&gt;
&lt;li&gt;Assisting with various assignments&lt;/li&gt;
&lt;li&gt;Code repository search and specific feature location&lt;/li&gt;
&lt;li&gt;Creating unit tests&lt;/li&gt;
&lt;li&gt;Executing git operations&lt;/li&gt;
&lt;li&gt;Executing deployment tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Can execute almost everything involving documents and command lines, helpful in development, debugging, debugging, and document writing&lt;/li&gt;
&lt;li&gt;Truly the most Agent-like product at the current stage&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;example-leetcode-tracker&#34;&gt;Example: Leetcode Tracker
&lt;/h1&gt;&lt;p&gt;There are many shared Leetcode premium accounts on Taobao, but sometimes we still need to add our problem-solving records to our own accounts. After purchasing a shared premium account, we can export a company&amp;rsquo;s problems as a CSV file, then export our own problem-solving records as another CSV file. By comparing these two files, we can easily track our current progress. Cursor is very good at writing such small tools:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/EB4BE820-4D12-498F-BD90-063A7969900B/2F1390B4-A09D-4F33-8351-A84CEAFFD988_2/AyL4SxnKvRQN1HyrL8kxUxyPhT0WBLKOpOArV2UYOwAz/Image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;We just need to copy elements from the webpage, and Cursor can write complete CSV files for us and automatically generate a perfect frontend interface, greatly improving our problem-solving efficiency.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How to install Rodin software on a MacBook with an Apple chip</title>
        <link>https://example.org/post/2025/02/rodin/</link>
        <pubDate>Sat, 01 Feb 2025 13:01:39 +0000</pubDate>
        
        <guid>https://example.org/post/2025/02/rodin/</guid>
        <description>&lt;h3 id=&#34;steps-to-install-rodin-on-macos-m1-arm-architecture&#34;&gt;&lt;strong&gt;Steps to Install Rodin on macOS (M1 ARM Architecture):&lt;/strong&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Install x86 JDK&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download the  &lt;strong&gt;Intel x86 JDK 18&lt;/strong&gt; (macOS .dmg) from Oracle:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://download.oracle.com/java/18/archive/jdk-18.0.2.1_macos-x64_bin.dmg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;jdk-18.0.2.1_macos-x64_bin.dmg&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the installer; it automatically configures the Java environment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Download and Install Rodin&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Get  &lt;strong&gt;Rodin 3.8/3.9&lt;/strong&gt; (x86_64 version) from SourceForge:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://sourceforge.net/projects/rodin-b-sharp/files/Core_Rodin_Platform/3.8/rodin-3.8.0.202304051545-af2f57e1e-macosx.cocoa.x86_64.tar.gz/download&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;rodin-3.8.0.202304051545- macosx.cocoa.x86_64.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extract the  &lt;code&gt;.tar.gz&lt;/code&gt; file and move  &lt;code&gt;Rodin.app&lt;/code&gt; to the  &lt;code&gt;/Applications&lt;/code&gt; folder.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fix macOS Security Permissions&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Run this command to bypass &amp;ldquo;app is damaged&amp;rdquo; errors:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo xattr -cr /Applications/Rodin.app
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Rodin should be able to run without any additional steps (e.g., configuring the Java VM path).&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Differential Attack on FEAL-4 - From Principles to Implementation</title>
        <link>https://example.org/post/2025/01/feal-4/</link>
        <pubDate>Wed, 01 Jan 2025 13:15:04 +0000</pubDate>
        
        <guid>https://example.org/post/2025/01/feal-4/</guid>
        <description>&lt;p&gt;This article primarily introduces how to perform differential cryptanalysis on the traditional block cipher algorithm FEAL-4, and demonstrates the attack process and key implementation details. The text also includes some experimental data and attack results for interested readers to reference or reproduce.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;two-important-images&#34;&gt;Two Important Images
&lt;/h2&gt;&lt;p&gt;Before delving into the analysis, here are two images closely related to FEAL-4 to provide an intuitive understanding of differential propagation and the overall encryption process.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Differential Propagation Diagram&lt;/strong&gt;&lt;br&gt;
The figure below shows how plaintext differences (in XOR form) propagate through the encryption rounds in FEAL-4 and ultimately reflect in the ciphertext.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/BC194830-506A-4A58-A67E-4C93B48730F8/E52F074B-64AB-4DF4-A553-907625B5D18F_2/UTpozkY6Wu2EoytDJ1dciSe132jz20EsyjndJ7GALVQz/Image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;FEAL-4 Workflow Diagram&lt;/strong&gt;&lt;br&gt;
The following figure illustrates the overall encryption framework of FEAL-4, including the left and right blocks of the plaintext, the injection of round subkeys, and the usage flow of the F function.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/BC194830-506A-4A58-A67E-4C93B48730F8/FCB4E65D-A8EE-457F-A78C-4A788E832B87_2/rzEGfY9PioZpJMMK4Q466xqJI7rwGXEPRybyCDPuHW8z/Image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;characteristics-of-the-f-function&#34;&gt;Characteristics of the F Function
&lt;/h2&gt;&lt;p&gt;The round function of FEAL-4 (i.e., the F function) can be viewed as some form of random permutation on a 32-bit input. In differential analysis, we do not need the specific implementation of F, but rather focus on its two key differential properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If $X \oplus Y = 0$, then $F(X) = F(Y)$.&lt;/li&gt;
&lt;li&gt;If $X \oplus Y = 0x80800000$, then $F(X) \oplus F(Y) = 0x02000000$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With these two conclusions, we can infer the output behavior under specific differential inputs in subsequent analyses, thereby aiding in locating the subkeys.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;detailed-analysis-of-differential-paths&#34;&gt;Detailed Analysis of Differential Paths
&lt;/h2&gt;&lt;p&gt;Suppose we choose a pair of special plaintexts $P_0$ and $P_1$ such that:
$$
P_0 \oplus P_1 = 0x8080000080800000 = P^{\prime}.
$$
This specific differential vector helps simplify the differential computations in several rounds of FEAL-4 outputs.&lt;/p&gt;
&lt;h3 id=&#34;1-derivation-of-initial-round-differences&#34;&gt;1. Derivation of Initial Round Differences
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Let $(L0_0, R0_0)$ denote the left and right blocks of $P_0$ (similarly, $(L0_1, R0_1)$ denotes those of $P_1$).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After the XOR operation in the first round:
$$
L1_0 \oplus L1_1 = (L0_0 \oplus K4) \oplus (L0_1 \oplus K4)
= L0_0 \oplus L0_1
= 0x80800000.
$$
Similarly, the differential of the right half can be derived.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Furthermore, due to the &amp;ldquo;additional XOR round&amp;rdquo; during encryption, we obtain:
$$
R2_0 \oplus R2_1
= (R1_0 \oplus L1_0) \oplus (R1_1 \oplus L1_1)
= 0x80800000 \oplus 0x80800000
= 0.
$$
This implies that in subsequent computations, the differences can be merged in a simpler form.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-backward-differential-calculation&#34;&gt;2. Backward Differential Calculation
&lt;/h3&gt;&lt;p&gt;After obtaining the plaintext pair $(P_0, P_1)$ and the corresponding ciphertext pair $(C_0, C_1)$, further backward derivations can be made. Let the ciphertext be denoted as $(L, R)$, then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compute $C^{\prime} = C_0 \oplus C_1$, obtaining $(L^{\prime}, R^{\prime})$.&lt;/li&gt;
&lt;li&gt;Based on the known differential properties, gradually restore intermediate variables such as $X^{\prime}$, $Y^{\prime}$, $Z^{\prime}$, etc., in the last round.&lt;/li&gt;
&lt;li&gt;Using these results, attacks or verifications on the subkeys can be performed.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;attacking-k3&#34;&gt;Attacking K3
&lt;/h2&gt;&lt;p&gt;In differential analysis, one often starts with attacking an intermediate round subkey, such as $K_3$. The specific steps are as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Select Plaintext Pairs:&lt;/strong&gt; I generated 12 pairs of random plaintexts satisfying&lt;br&gt;
$$
P_0 \oplus P_1 = 0x8080000080800000
$$&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Encrypt and Extract Differences:&lt;/strong&gt; Encrypt the above plaintext pairs to obtain the corresponding ciphertext pairs; combine with the differential path to derive intermediate values $Y_0$, $Y_1$, $Z^{\prime}$, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Traverse $K_3$:&lt;/strong&gt;&lt;br&gt;
$$
Z^{\prime} = Z_0 \oplus Z_1 = F(Y_0 \oplus K_3) \oplus F(Y_1 \oplus K_3).
$$&lt;br&gt;
Any candidate $K_3$ that satisfies the differential equation $= 0x02000000$ is retained.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using this method, I successfully obtained four candidate subkeys:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cfa38976, cfa309f6, 4f238976, 4f2309f6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;An example command to execute the above process is:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./main -mode=attackk3 -file=K3.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This implementation is consistent with the method I introduced on &lt;a class=&#34;link&#34; href=&#34;https://www.theamazingking.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.theamazingking.com&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;attacking-k2&#34;&gt;Attacking K2
&lt;/h2&gt;&lt;p&gt;After obtaining several candidates for $K_3$, we can proceed to deduce $K_2$. The core equation is:
$$
X&amp;rsquo; = X_0 \oplus X_1
= F(U_0 \oplus K_2) \oplus F(U_1 \oplus K_2),
$$
where $U$ comes from the previous round operations (including further computations on $Y$, $Z$, etc.). Similarly:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Generate plaintext pairs that satisfy the differential condition
$$
P_0 \oplus P_1 = 0x0000000080800000.
$$&lt;/li&gt;
&lt;li&gt;Capture ciphertext differences after encryption, and by traversing all possible $K_2$ values, check if the differential constraint $=0x02000000$ is satisfied.&lt;/li&gt;
&lt;li&gt;Example command:
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./main -mode=attackk2 -file=K2.txt -k3=cfa38976,cfa309f6,4f238976,4f2309f6
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;The final output example is as follows:
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Candidate K2: 8b722e41 (K3: cfa38976)
Candidate K2: 8b72aec1 (K3: cfa38976)
...
Candidate K2: 89722e43 (K3: 4f2309f6)
Candidate K2: 8972aec3 (K3: 4f2309f6)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;attacking-k1&#34;&gt;Attacking K1
&lt;/h2&gt;&lt;p&gt;Similarly, attacking $K_1$ can be done following the previous process.&lt;br&gt;
To ensure the differential path consistently presents the expected results, I generated 12 plaintext pairs satisfying&lt;br&gt;
$$
P_0 \oplus P_1 = 0x0000000002000000
$$&lt;br&gt;
and verified their encryption outputs.&lt;/p&gt;
&lt;p&gt;Example command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./main -mode=attackk1 -file=K1.txt -k3k2=&amp;#34;cfa38976,8b722e41; cfa38976,8b72aec1; ...&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This allows you to input all previously obtained candidate combinations of $K_3$ and $K_2$ at once, and finally find the corresponding $K_1$ candidates.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;attacking-k0-k4-k5&#34;&gt;Attacking K0, K4, K5
&lt;/h2&gt;&lt;p&gt;Once $K_3$, $K_2$, and $K_1$ are all obtained, $K_0$, $K_4$, and $K_5$ required for the last round can be deduced.&lt;br&gt;
Let the final encrypted left and right parts be $L_0$, $R_0$. The corresponding plaintext blocks are $PL$, $PR$. Then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$PL \oplus K_4 = LR_0$&lt;/li&gt;
&lt;li&gt;$PR \oplus K_5 = RR_0$&lt;/li&gt;
&lt;li&gt;$RR_0 \oplus LR_0 = R_0$&lt;/li&gt;
&lt;li&gt;$f(R_0 \oplus K_0) \oplus L_0 = LR_0$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By enumerating all possible $K_0$, the corresponding $K_4$ and $K_5$ can be solved through the above equations. Then, use other plaintext-ciphertext pairs to cross-validate correctness. If all are satisfied, the correct final key set is obtained.&lt;/p&gt;
&lt;p&gt;Example command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./main -mode=attackk0k4k5 -k3k2k1=&amp;#34;...&amp;#34; -file=K1.txt -file2=K1_p.txt
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;implementation-optimization-and-verification&#34;&gt;Implementation, Optimization, and Verification
&lt;/h2&gt;&lt;h3 id=&#34;1-automated-generation-and-parallel-computing&#34;&gt;1. Automated Generation and Parallel Computing
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Automatically Generate Random Plaintext Pairs:&lt;/strong&gt; Control the XOR differences in the code in advance to batch output plaintext files that meet the requirements (e.g., &lt;code&gt;K3_p.txt&lt;/code&gt;, &lt;code&gt;K2_p.txt&lt;/code&gt;, &lt;code&gt;K1_p.txt&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parallelized Search:&lt;/strong&gt; Use Go&amp;rsquo;s Goroutines to start 10 parallel tasks, maximizing CPU resource utilization on a 10-core Mac.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Progress Bars and Visualization:&lt;/strong&gt; Use the &lt;code&gt;progressbar&lt;/code&gt; library to display search progress in real-time, making the experimental process more intuitive.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-verification-methods&#34;&gt;2. Verification Methods
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Local Custom Key Testing&lt;/strong&gt;&lt;br&gt;
First, select a set of known $K_0$â€“$K_5$ (e.g., &lt;code&gt;0x00000001, 0x00000002, 0x00000004, 0x00000008, 0x00000010, 0x00000020&lt;/code&gt;), encrypt the previously generated plaintext pairs, and repeat the differential analysis process to see if this set of keys can be matched among the results.&lt;br&gt;
Experiments confirmed the ability to correctly restore this set of test keys, thereby verifying the accuracy of the code logic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Specific Plaintext-Ciphertext Pair Testing&lt;/strong&gt;&lt;br&gt;
Select a plaintext &lt;code&gt;1234567890abcdef&lt;/code&gt; and the ciphertext &lt;code&gt;f43ae3eeb56e2bbf&lt;/code&gt; generated in the Einstein Zone, and verify that each of the 256 candidate $K_0$â€“$K_5$ sets can reproduce this encryption mapping, further confirming the attack process is correct.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;final-results&#34;&gt;Final Results
&lt;/h2&gt;&lt;p&gt;All deduced $K_0$â€“$K_5$ are stored in &lt;code&gt;final_result.txt&lt;/code&gt;. After deduplication, they include the following ranges:&lt;/p&gt;
&lt;h3 id=&#34;possible-values-for-k0&#34;&gt;Possible Values for K0
&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;890c2148 890ca1c8 098c2148 098ca1c8 ...
0b8c214a 0b8ca1ca 8b0c214a 8b0ca1ca
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;possible-values-for-k1&#34;&gt;Possible Values for K1
&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;471f077e 471f87fe c79f077e c79f87fc ...
451f077c 451f87fc c59f077c c59f87fc
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;possible-values-for-k2&#34;&gt;Possible Values for K2
&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;8b722e41 8b72aec1 8b722e43 8b72aec3 ...
89722e43 8972aec3
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;possible-values-for-k3&#34;&gt;Possible Values for K3
&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cfa38976 cfa309f6 4f238976 4f2309f6
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;possible-values-for-k4&#34;&gt;Possible Values for K4
&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;89eb0024 89eb0026 8beb0024 8beb0026
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;possible-values-for-k5&#34;&gt;Possible Values for K5
&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;b85e6bc0 b85e6bc2 ba5e6bc0 ba5e6bc2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With the aid of differential analysis, we ultimately obtained a set of candidate subkeys. Compared to modern block ciphers (such as AES), FEAL-4 has fewer rounds and a simpler structure, making it very suitable for demonstrating the concept of differential analysis in teaching and research.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;This article detailed the complete process of performing a differential attack on FEAL-4, including designing differential paths, generating plaintext pairs, attacking intermediate subkeys ($K_3$, $K_2$, $K_1$), and finally reverse-solving for $K_0$, $K_4$, $K_5$. It also introduced several optimizations and verification methods during the code implementation process.&lt;br&gt;
The FEAL-4 algorithm, due to its fewer rounds and simpler structure, provides convenience for differential analysis. However, for more secure and complex modern block algorithms, the same analytical approach remains crucial. This case study aims to inspire learners and researchers in cryptography. If you have any questions or improvement suggestions, feel free to discuss and exchange ideas in the comments section!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How to Quickly Solve Disassembly Problems</title>
        <link>https://example.org/post/2024/11/disassembly/</link>
        <pubDate>Sun, 03 Nov 2024 14:21:43 +0000</pubDate>
        
        <guid>https://example.org/post/2024/11/disassembly/</guid>
        <description>&lt;p&gt;For DCU&amp;rsquo;s Secure Programming course, the disassembly problems have a certain pattern. Using a fixed approach to solving them can help achieve quick results.&lt;/p&gt;
&lt;h1 id=&#34;prerequisite-skills&#34;&gt;Prerequisite Skills
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Familiarity with assembly commands &lt;a class=&#34;link&#34; href=&#34;craftdocs://open?blockId=8DC79A21-6886-4C9D-BAF2-8CAB0A186B73&amp;amp;spaceId=c5e6e898-910c-6f27-fbc5-91f4c34a9511&#34; &gt;Assembly Instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Understanding &lt;code&gt;%&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; for registers and immediate values &lt;a class=&#34;link&#34; href=&#34;craftdocs://open?blockId=624020ED-93E1-483B-8FA7-7D21D0B71036&amp;amp;spaceId=c5e6e898-910c-6f27-fbc5-91f4c34a9511&#34; &gt;$ and % Registers and Immediate Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Knowledge of direct and indirect addressing &lt;a class=&#34;link&#34; href=&#34;craftdocs://open?blockId=C4F438DF-5C27-4FAF-82DF-7D815FB93AD1&amp;amp;spaceId=c5e6e898-910c-6f27-fbc5-91f4c34a9511&#34; &gt;Direct and Indirect Addressing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Familiarity with one example &lt;a class=&#34;link&#34; href=&#34;craftdocs://open?blockId=F8D3758A-2BBE-46A0-B06A-9CB8EBC9D23E&amp;amp;spaceId=c5e6e898-910c-6f27-fbc5-91f4c34a9511&#34; &gt;C Code to Assembly Example&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;approach-to-solving&#34;&gt;Approach to Solving
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;craftdocs://open?blockId=5FC17CD5-B366-4554-B226-D38877BAB7A4&amp;amp;spaceId=c5e6e898-910c-6f27-fbc5-91f4c34a9511&#34; &gt;Identify the number of parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;craftdocs://open?blockId=8B96E2AA-7B13-4371-8DF9-37856DD028BD&amp;amp;spaceId=c5e6e898-910c-6f27-fbc5-91f4c34a9511&#34; &gt;Identify the number of local variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;craftdocs://open?blockId=F7BE55C0-B922-4724-8405-BD72D9F0C85A&amp;amp;spaceId=c5e6e898-910c-6f27-fbc5-91f4c34a9511&#34; &gt;Recognize the loop body&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;craftdocs://open?blockId=4E432226-5F3A-411D-8479-34D681002111&amp;amp;spaceId=c5e6e898-910c-6f27-fbc5-91f4c34a9511&#34; &gt;Analyze remaining code snippets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;craftdocs://open?blockId=E0AD97BA-3EFF-4498-9847-0536A7B7DABD&amp;amp;spaceId=c5e6e898-910c-6f27-fbc5-91f4c34a9511&#34; &gt;Identify the return value&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;identify-the-number-of-parameters&#34;&gt;Identify the Number of Parameters
&lt;/h2&gt;&lt;p&gt;The position of &lt;code&gt;ebp&lt;/code&gt; is the saved frame pointer, and &lt;code&gt;ebp+4&lt;/code&gt; is the return address. Since the problems typically assume all parameters are of type &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;int*&lt;/code&gt;, &lt;code&gt;ebp+8&lt;/code&gt;, &lt;code&gt;ebp+c&lt;/code&gt;, and &lt;code&gt;ebp+10&lt;/code&gt; correspond to the first, second, and third parameters, respectively.&lt;/p&gt;
&lt;p&gt;By quickly scanning the code for occurrences of &lt;code&gt;0x__(%ebp)&lt;/code&gt; and identifying the largest offset, the number of parameters can be determined as &lt;code&gt;(offset - 4) // 4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;push %ebp                   &amp;lt;foo+0&amp;gt;
mov %esp, %ebp              &amp;lt;foo+1&amp;gt;
sub $0x4, %esp              &amp;lt;foo+3&amp;gt;
mov 0x8(%ebp), %eax         &amp;lt;foo+6&amp;gt;
mov %eax, -0x4(%ebp)        &amp;lt;foo+9&amp;gt;
mov -0x4(%ebp), %eax        &amp;lt;foo+12&amp;gt;
cmp 0x10(%ebp), %eax        &amp;lt;foo+15&amp;gt;
jge &amp;lt;foo+32&amp;gt;                &amp;lt;foo+18&amp;gt;
mov 0xc(%ebp), %eax         &amp;lt;foo+20&amp;gt;
incl (%eax)                 &amp;lt;foo+23&amp;gt;
lea -0x4(%ebp), %eax        &amp;lt;foo+25&amp;gt;
incl (%eax)                 &amp;lt;foo+28&amp;gt;
jmp &amp;lt;foo+12&amp;gt;                &amp;lt;foo+30&amp;gt;
mov $0x0, %eax              &amp;lt;foo+32&amp;gt;
leave                       &amp;lt;foo+37&amp;gt;
ret                         &amp;lt;foo+38&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, &lt;code&gt;0x10(%ebp)&lt;/code&gt; exists, so the parameter count is &lt;code&gt;(16 - 4) / 4 = 3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can construct the framework of the code as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt; correspond to &lt;code&gt;ebp+8&lt;/code&gt;, &lt;code&gt;ebp+c&lt;/code&gt;, and &lt;code&gt;ebp+10&lt;/code&gt;, respectively. Note that parameters are pushed onto the stack in reverse order, so the closer to &lt;code&gt;ebp&lt;/code&gt;, the earlier the parameter appears in the list.&lt;/p&gt;
&lt;p&gt;For now, assume all are &lt;code&gt;int&lt;/code&gt; types. Adjust later if inconsistencies are found.&lt;/p&gt;
&lt;h2 id=&#34;identify-the-number-of-local-variables&#34;&gt;Identify the Number of Local Variables
&lt;/h2&gt;&lt;p&gt;The number of local variables is determined by the third line of the code: &lt;code&gt;sub $0x4, %esp&lt;/code&gt;. The amount subtracted corresponds to the length of the allocated local variables.&lt;/p&gt;
&lt;p&gt;In this example, &lt;code&gt;sub $0x4, %esp&lt;/code&gt; indicates 4 bytes, so there is one local variable. Assume it is an &lt;code&gt;int&lt;/code&gt; and name it &lt;code&gt;i&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The code expands to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;recognize-the-loop-body&#34;&gt;Recognize the Loop Body
&lt;/h2&gt;&lt;p&gt;Loops are typically &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt; loops. To identify:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Judgment Entry:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Look for a comparison instruction (e.g., &lt;code&gt;cmp&lt;/code&gt;) followed by a jump instruction (e.g., &lt;code&gt;jge&lt;/code&gt; or &lt;code&gt;jle&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;These indicate the start of a condition check.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Loop Body:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unconditional &lt;code&gt;jmp&lt;/code&gt; instructions signify loops. The jump target is the beginning of the condition check.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Condition:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The judgment condition combines the comparison and preceding instructions into a complete condition.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;example&#34;&gt;Example:
&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;push %ebp                   &amp;lt;foo+0&amp;gt;
mov %esp, %ebp              &amp;lt;foo+1&amp;gt;
sub $0x4, %esp              &amp;lt;foo+3&amp;gt;
mov 0x8(%ebp), %eax         &amp;lt;foo+6&amp;gt;
mov %eax, -0x4(%ebp)        &amp;lt;foo+9&amp;gt;
mov -0x4(%ebp), %eax        &amp;lt;foo+12&amp;gt;
cmp 0x10(%ebp), %eax        &amp;lt;foo+15&amp;gt;
jge &amp;lt;foo+32&amp;gt;                &amp;lt;foo+18&amp;gt;
mov 0xc(%ebp), %eax         &amp;lt;foo+20&amp;gt;
incl (%eax)                 &amp;lt;foo+23&amp;gt;
lea -0x4(%ebp), %eax        &amp;lt;foo+25&amp;gt;
incl (%eax)                 &amp;lt;foo+28&amp;gt;
jmp &amp;lt;foo+12&amp;gt;                &amp;lt;foo+30&amp;gt;
mov $0x0, %eax              &amp;lt;foo+32&amp;gt;
leave                       &amp;lt;foo+37&amp;gt;
ret                         &amp;lt;foo+38&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Judgment Entry:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The combination of &lt;code&gt;cmp&lt;/code&gt; and &lt;code&gt;jge&lt;/code&gt; indicates a judgment entry.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Loop:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;jmp&lt;/code&gt; command jumps to &lt;code&gt;&amp;lt;foo+12&amp;gt;&lt;/code&gt;, signifying the loop condition check.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Condition:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mov -0x4(%ebp), %eax&lt;/code&gt;: Assigns the value of &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;eax&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmp 0x10(%ebp), %eax&lt;/code&gt;: Compares &lt;code&gt;eax&lt;/code&gt; (value of &lt;code&gt;i&lt;/code&gt;) with &lt;code&gt;c&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This calculates &lt;code&gt;i - c&lt;/code&gt; and checks the condition with &lt;code&gt;jge&lt;/code&gt;. In assembly, conditions are reversed compared to C: &lt;code&gt;jge&lt;/code&gt; skips the loop if the condition is met. Thus, the C condition is &lt;code&gt;i - c &amp;lt; 0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The code updates to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;analyze-remaining-code-snippets&#34;&gt;Analyze Remaining Code Snippets
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Before the Loop:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;mov 0x8(%ebp), %eax         &amp;lt;foo+6&amp;gt;
mov %eax, -0x4(%ebp)        &amp;lt;foo+9&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These lines assign the value of &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;i&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Inside the Loop:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;mov 0xc(%ebp), %eax         &amp;lt;foo+20&amp;gt;
incl (%eax)                 &amp;lt;foo+23&amp;gt;
lea -0x4(%ebp), %eax        &amp;lt;foo+25&amp;gt;
incl (%eax)                 &amp;lt;foo+28&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mov 0xc(%ebp), %eax&lt;/code&gt; and &lt;code&gt;incl (%eax)&lt;/code&gt; increment the value at the address stored in &lt;code&gt;b&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b)&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lea -0x4(%ebp), %eax&lt;/code&gt; and &lt;code&gt;incl (%eax)&lt;/code&gt; increment &lt;code&gt;i&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The updated code becomes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b)&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;identify-the-return-value&#34;&gt;Identify the Return Value
&lt;/h2&gt;&lt;p&gt;In x86 calling conventions, return values are stored in the &lt;code&gt;eax&lt;/code&gt; register.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;mov $0x0, %eax
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This indicates the function returns &lt;code&gt;0&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;final-code&#34;&gt;Final Code
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b)&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>How to handle the inconsistency in LaTeX formatting from ChatGPT between Obsidian and Craft.</title>
        <link>https://example.org/post/2024/10/raycast-craft/</link>
        <pubDate>Sat, 26 Oct 2024 12:59:21 +0000</pubDate>
        
        <guid>https://example.org/post/2024/10/raycast-craft/</guid>
        <description>&lt;p&gt;In a previous article, I used Obsidian&amp;rsquo;s QuickAdd to create a script that automatically converts text copied from ChatGPT and fixes the LaTeX formatting. However, there is no suitable plugin available for the Craft app.&lt;/p&gt;
&lt;p&gt;We can use Raycast to achieve this functionality uniformly.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;create-a-raycast-script&#34;&gt;Create a Raycast Script
&lt;/h1&gt;&lt;p&gt;First, we need to create a script.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/807ADA48-9980-42C3-9BA8-136F966CD4A9/F182CBD0-1613-4125-8D24-917683A8EA73_2/CVdOosoD7Oc2T1qC3WBN9tGoE5z0ixvfd5diCpBxsG0z/Image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Next, select the Bash template.&lt;/p&gt;
&lt;p&gt;Then, we edit the Bash script and enter the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Required parameters:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# @raycast.schemaVersion 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# @raycast.title Copy From ChatGPT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# @raycast.mode silent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Optional parameters:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# @raycast.icon ðŸ¤–&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# @raycast.packageName ChatGPT Utils&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Documentation:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# @raycast.description Copy From ChatGPT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# @raycast.author Nansen Li&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# @raycast.authorURL nansenli.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Get clipboard content&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clipboard_content&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pbpaste&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Check if content was successfully retrieved&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$clipboard_content&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clipboard is empty or inaccessible.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Process clipboard content&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;modified_content&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$clipboard_content&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; | &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/\\\[/$$/g; s/\\\]/$$/g; s/\\( /$/g; s/ \\\)/$/g&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Write the modified content back to the clipboard&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$modified_content&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; | pbcopy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;After creating the script, we need to add the directory containing the script to Raycast.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/807ADA48-9980-42C3-9BA8-136F966CD4A9/C5D4A349-5648-46F2-A5B0-3881563659A7_2/zvYyttwVwKK8ZuyBdX2Ohd7mPFZfHSw253MaW9xaOiAz/Image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;In this step, select the directory where the script was just created. At this point, we can see the newly created script in &lt;code&gt;Script Commands&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;how-to-use&#34;&gt;How to Use
&lt;/h1&gt;&lt;p&gt;After copying a formula from ChatGPT, open the Raycast panel, find the newly created script, and run it. The clipboard content will be automatically fixed. Then, simply paste it into Obsidian or Craft.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Summary of Huawei Ireland Research Center Tech Arena 2024 Competition</title>
        <link>https://example.org/post/2024/10/huawei2024/</link>
        <pubDate>Thu, 24 Oct 2024 10:01:27 +0000</pubDate>
        
        <guid>https://example.org/post/2024/10/huawei2024/</guid>
        <description>&lt;h2 id=&#34;background&#34;&gt;Background
&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;m Nansen, and I participated in the 2024 Huawei Ireland Research Center Server Cluster Management Optimization Competition. Here, Iâ€™d like to share my experience in this competition and summarize some key takeaways.&lt;/p&gt;
&lt;p&gt;Our algorithm code can be found here: &lt;a class=&#34;link&#34; href=&#34;https://github.com/linanwx/huawei2024&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;huawei2024&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;competition-results&#34;&gt;Competition Results
&lt;/h2&gt;&lt;p&gt;We achieved first place in the algorithm section, scoring approximately 4%-5% higher than the second to fourth places, giving us a significant advantage. However, we faced considerable challenges in the presentation segment. First, we recognized that there is room for improvement in our English fluency. Second, we found that our presentation slides could be more polished and visually appealing. Lastly, we encountered some challenges with time management. Nevertheless, despite these obstacles, we still managed to secure third place overall.&lt;/p&gt;
&lt;h2 id=&#34;competition-process&#34;&gt;Competition Process
&lt;/h2&gt;&lt;p&gt;The competition was divided into two stages. The first stage allowed ample preparation time. Once we settled on using the simulated annealing algorithm, we began developing it. The main difficulty in this stage was optimizing and understanding the requirements of the task. During development, we encountered numerous bugs, but after fixing them, our score improved significantly.&lt;/p&gt;
&lt;p&gt;In the second stage, as the problem was released on the day of the competition, I continued optimizing the algorithm from the first stage, successfully increasing the evaluation speed by 1000 times. This significantly boosted our performance in the second stage, providing us with enough strength to vie for first place.&lt;/p&gt;
&lt;p&gt;In the final round, our algorithm performed very consistently, and after some adjustments, we took a considerable lead over our competitors. However, because we didn&amp;rsquo;t put enough emphasis on making an effective presentation, we mistakenly believed that high algorithm performance alone would guarantee a top score, which proved to be wrong.&lt;/p&gt;
&lt;h2 id=&#34;lessons-learned&#34;&gt;Lessons Learned
&lt;/h2&gt;&lt;h3 id=&#34;algorithm-choice&#34;&gt;Algorithm Choice
&lt;/h3&gt;&lt;p&gt;Fortunately, I chose the right algorithm from the outset, and shortly after the problem was released, I devised a framework that suited the entire competition. However, I did take some wrong turns, such as attempting impractical algorithms like PPO. After initial trials failed, I should have moved on instead of wasting further effort. Given the limited time, we should focus on achievable optimal results within the shortest period rather than pursuing ideal but unrealistic solutions. It&amp;rsquo;s also crucial to recognize one&amp;rsquo;s limitations and concentrate on goals that are achievable in the available time.&lt;/p&gt;
&lt;h3 id=&#34;team-collaboration&#34;&gt;Team Collaboration
&lt;/h3&gt;&lt;p&gt;Luckily, our team division was reasonable this time, and I did my best to ensure every member could contribute their value. One area for improvement is communicating more with team members to understand their ideas and preferences. Since I mainly handled the algorithm part, I had relatively little interaction with teammates, which I will work to improve next time.&lt;/p&gt;
&lt;h3 id=&#34;presentation-design&#34;&gt;Presentation Design
&lt;/h3&gt;&lt;p&gt;We didnâ€™t anticipate that the level of presentation skills from other teams would be so high. My teammates speculated that some competitors might have a business background, giving them an advantage in crafting presentations. Moreover, they had five members in their team while we only had three, which put us at a disadvantage regarding manpower. These were objective challenges, but if we had paid more attention to creating our presentation, the first prize could have been within our reach.&lt;/p&gt;
&lt;h3 id=&#34;over-committing-leading-to-imbalance&#34;&gt;Over-committing Leading to Imbalance
&lt;/h3&gt;&lt;p&gt;In the final round, our algorithm was already quite excellent, and our score surpassed the previously top-ranked team. However, I continued spending considerable time on further optimizations. Even though we were significantly ahead, this focus caused us to neglect the preparation of our presentation. In hindsight, I should have known when to stop and fully recognized the importance of balancing different aspects of the scoring criteria.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;Participating in the Huawei Tech Arena 2024 competition provided me with invaluable experience. The competition highlighted our strengths, but also revealed areas where we need to improve in terms of showcasing skills and team collaboration. Looking ahead, I will keep these lessons in mind and strive to continuously improve myself in future competitions. If you have any questions, feel free to leave them in the comments section.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Leetcode Notes</title>
        <link>https://example.org/post/2024/10/leetcode241020/</link>
        <pubDate>Mon, 21 Oct 2024 19:39:42 +0000</pubDate>
        
        <guid>https://example.org/post/2024/10/leetcode241020/</guid>
        <description>&lt;p&gt;Today, I began the long journey of practicing Leetcode problems. Previously, I only did a few problems to maintain familiarity, but today, I officially started preparing for interviews.&lt;/p&gt;
&lt;p&gt;I have been thinking about how to efficiently solve Leetcode problems. In my opinion, to be efficient, one must memorize problems. Just as reading a book a hundred times reveals its meaning, training a language model through extensive practice hones its coding skills. Similarly, with Leetcode, through repeated practice, the answers will come naturally; quantity brings quality.&lt;/p&gt;
&lt;h2 id=&#34;53-maximum-subarrayhttpsleetcodecomproblemsmaximum-subarray&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://leetcode.com/problems/maximum-subarray/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;53. Maximum Subarray&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;The solution can be approached using &lt;strong&gt;Kadane&amp;rsquo;s Algorithm&lt;/strong&gt;. The code is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxSubArray&lt;/span&gt;(nums):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    max_current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max_global &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        max_current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(num, max_current &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; num)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        max_global &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(max_global, max_current)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max_global
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a classic dynamic programming problem, and the above algorithm actually hides the essence of dynamic programming.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; maxSubArray(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; dp(nums.size());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dp[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            dp[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(dp[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[i], nums[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;max_element&lt;/span&gt;(dp.begin(), dp.end());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code better reflects the essence of dynamic programming.&lt;/p&gt;
&lt;p&gt;To understand the formula &lt;code&gt;dp[i] = max(nums[i] + dp[i-1], nums[i])&lt;/code&gt;, we can analyze it from a dynamic programming perspective. The core idea here is to make the optimal choice at each position. Here is a detailed explanation:&lt;/p&gt;
&lt;h3 id=&#34;1-what-does-dpi-represent&#34;&gt;1. What does &lt;code&gt;dp[i]&lt;/code&gt; represent?
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dp[i]&lt;/code&gt; represents the &lt;strong&gt;maximum subarray sum ending at position &lt;code&gt;i&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-why-compare-numsi--dpi-1-and-numsi&#34;&gt;2. Why compare &lt;code&gt;nums[i] + dp[i-1]&lt;/code&gt; and &lt;code&gt;nums[i]&lt;/code&gt;?
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;The key question is: &lt;strong&gt;Should the current maximum subarray include the previous part (&lt;code&gt;dp[i-1]&lt;/code&gt;)?&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;nums[i] + dp[i-1]&lt;/code&gt;&lt;/strong&gt;: If &lt;code&gt;dp[i-1]&lt;/code&gt; is positive, adding the current &lt;code&gt;nums[i]&lt;/code&gt; will increase the subarray sum, so we choose to add it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;nums[i]&lt;/code&gt;&lt;/strong&gt;: If &lt;code&gt;dp[i-1]&lt;/code&gt; is negative, we choose to start a new subarray from the current position, as a negative sum will only drag down the current sum.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-why-not-compare-subsequent-numbers&#34;&gt;3. Why not compare subsequent numbers?
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;When making the comparison, we assume the subarray stops at position &lt;code&gt;i&lt;/code&gt;. In other words, we consider the maximum value within the range &lt;code&gt;[0:i]&lt;/code&gt;. At position &lt;code&gt;i&lt;/code&gt;, we either add the previous subarray or abandon it and only use the current number.&lt;/li&gt;
&lt;li&gt;We then traverse the entire array, finding the maximum value at each position, and finally return the largest value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;57-insert-intervalhttpsleetcodecomproblemsinsert-interval&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://leetcode.com/problems/insert-interval/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;57. Insert Interval&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;This is a classic interval merging problem, where we need to merge a new interval into existing intervals.&lt;/p&gt;
&lt;p&gt;The solution can be broken down as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step 1: Add all non-overlapping intervals that come before &lt;code&gt;newInterval&lt;/code&gt; to the result.&lt;/li&gt;
&lt;li&gt;Step 2: Merge all potentially overlapping intervals with &lt;code&gt;newInterval&lt;/code&gt;. Note the conditions for merging.&lt;/li&gt;
&lt;li&gt;Step 3: Add the remaining intervals to the result.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the condition for merging intervals is that the start of the previous interval is less than or equal to the end of the subsequent interval, i.e., &lt;code&gt;intervals[i][0] &amp;lt;= newInterval[1]&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(self, intervals: List[List[int]], newInterval: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[List[int]]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(intervals) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; intervals[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; newInterval[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ret_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(intervals[i])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(intervals) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; intervals[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; newInterval[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            newInterval[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(intervals[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], newInterval[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            newInterval[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(intervals[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], newInterval[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(newInterval)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(intervals):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ret_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(intervals[i])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret_list
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With careful attention to detail, this problem is not difficult.&lt;/p&gt;
&lt;h2 id=&#34;300-longest-increasing-subsequencehttpsleetcodecomproblemslongest-increasing-subsequence&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://leetcode.com/problems/longest-increasing-subsequence/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;300. Longest Increasing Subsequence&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;This is obviously a dynamic programming problem.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dp[i]&lt;/code&gt; represents the length of the longest increasing subsequence ending with a certain number.&lt;/p&gt;
&lt;p&gt;Each time an element is added, we update the current &lt;code&gt;dp&lt;/code&gt; array. If the current number is greater than the previous one, we increment the result by 1.&lt;/p&gt;
&lt;p&gt;Note that the first &lt;code&gt;dp[i]&lt;/code&gt; starts from index 1.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lengthOfLIS&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; len(nums)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(nums)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nums[j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums[i]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    dp[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(dp[i], dp[j] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(dp)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Complexity Analysis&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time Complexity: $O(n^2)$, due to the two nested loops.&lt;/li&gt;
&lt;li&gt;Space Complexity: $O(n)$, as we need a &lt;code&gt;dp&lt;/code&gt; array of length &lt;code&gt;n&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;674-longest-continuous-increasing-subsequencehttpsleetcodecomproblemslongest-continuous-increasing-subsequence&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://leetcode.com/problems/longest-continuous-increasing-subsequence/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;674. Longest Continuous Increasing Subsequence&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;This is a simple problem, but still worth understanding.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findLengthOfLCIS&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; len(nums)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(nums)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nums[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nums[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                dp[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(dp[i], dp[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(dp)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;392-is-subsequencehttpsleetcodecomproblemsis-subsequence&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://leetcode.com/problems/is-subsequence/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;392. Is Subsequence&lt;/a&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isSubsequence&lt;/span&gt;(self, s: str, t: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(s) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(t):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; t[j]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            j &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(s)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This problem can be solved using a two-pointer technique, with &lt;code&gt;t&lt;/code&gt; as the base. If &lt;code&gt;s&lt;/code&gt; contains matching characters, we move forward; if we reach the end of &lt;code&gt;s&lt;/code&gt;, it means the match is complete.&lt;/p&gt;
&lt;h2 id=&#34;115-distinct-subsequenceshttpsleetcodecomproblemsdistinct-subsequences&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://leetcode.com/problems/distinct-subsequences/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;115. Distinct Subsequences&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;This problem asks us to find how many distinct subsequences of string &lt;code&gt;s&lt;/code&gt; equal string &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, we need to define &lt;code&gt;dp&lt;/code&gt;, where &lt;code&gt;dp[i][j]&lt;/code&gt; represents the number of distinct subsequences that can be formed from the first &lt;code&gt;i&lt;/code&gt; characters of &lt;code&gt;s&lt;/code&gt; to form the first &lt;code&gt;j&lt;/code&gt; characters of &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dp[i][0]&lt;/code&gt; represents when &lt;code&gt;t&lt;/code&gt; is an empty string, the result is 1.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dp[0][j]&lt;/code&gt; represents forming &lt;code&gt;t&lt;/code&gt; from an empty string, which results in 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For &lt;code&gt;dp[i][j]&lt;/code&gt;, the result depends on the characters at positions &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If they are equal, the result is the sum of the cases where &lt;code&gt;s[i-1]&lt;/code&gt; is not matched (&lt;code&gt;dp[i-1][j]&lt;/code&gt;) and the cases where it is matched (&lt;code&gt;dp[i-1][j-1]&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;If they are not equal, the result is equal to &lt;code&gt;dp[i-1][j]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that &lt;code&gt;i, j&lt;/code&gt; refer to the first &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; characters.&lt;/p&gt;
&lt;p&gt;Additionally, &lt;code&gt;dp[0][0]&lt;/code&gt; is initialized to 1, as an empty string is a subsequence of any string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numDistinct&lt;/span&gt;(self, s: str, t: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(t) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(s) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(s) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            dp[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(t) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(s) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; t[j&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    dp[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dp[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dp[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    dp[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dp[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dp[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Off-by-One Overflow Attack Analysis</title>
        <link>https://example.org/post/2024/10/oboattact-md/</link>
        <pubDate>Tue, 15 Oct 2024 14:18:15 +0000</pubDate>
        
        <guid>https://example.org/post/2024/10/oboattact-md/</guid>
        <description>&lt;h1 id=&#34;off-by-one-overflow-attack-analysis&#34;&gt;Off-by-One Overflow Attack Analysis
&lt;/h1&gt;&lt;h2 id=&#34;background&#34;&gt;Background
&lt;/h2&gt;&lt;p&gt;Last week, I attended a security course that included an example of an off-by-one overflow vulnerability. Here is the original code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Simple off-by-one overflow example */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;input) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;strncpy&lt;/span&gt;(buf, input, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(buf));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  buf[&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(buf)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I&amp;#39;ve been hacked&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (argc &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage: %s input_string&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(EXIT_FAILURE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The answer provided for exploiting this vulnerability is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perl -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;system &amp;#34;./obo&amp;#34;, &amp;#34;\x38\x84\x04\x08&amp;#34;x256&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The result of running this command is that multiple lines of &lt;code&gt;I&#39;ve been hacked&lt;/code&gt; are printed on the screen.&lt;/p&gt;
&lt;h2 id=&#34;analysis&#34;&gt;Analysis
&lt;/h2&gt;&lt;p&gt;When the program enters the &lt;code&gt;foo&lt;/code&gt; function, the memory layout looks like this (as observed using GDB):&lt;/p&gt;
&lt;p&gt;From top to bottom, the layout contains the return address, the saved frame pointer, and the buffer (&lt;code&gt;buf&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;When the line &lt;code&gt;buf[sizeof(buf)] = &#39;\0&#39;;&lt;/code&gt; is executed, the least significant byte of the saved frame pointer (&lt;code&gt;ebp&lt;/code&gt;) is set to &lt;code&gt;0&lt;/code&gt;. To ensure that &lt;code&gt;ebp&lt;/code&gt; still points within the &lt;code&gt;buf&lt;/code&gt; region after being partially overwritten, a buffer of at least 1024 bytes is required. Specifically, &lt;code&gt;ebp&lt;/code&gt; needs to be overwritten such that it remains within a reasonable range (â€” up to &lt;code&gt;0xff&lt;/code&gt;), which is why the buffer is set to &lt;code&gt;0xff * 4&lt;/code&gt; bytes.&lt;/p&gt;
&lt;h2 id=&#34;understanding-assembly-commands-on-foo-return&#34;&gt;Understanding Assembly Commands on &lt;code&gt;foo&lt;/code&gt; Return
&lt;/h2&gt;&lt;p&gt;When the &lt;code&gt;foo&lt;/code&gt; function returns, it typically executes the following key assembly instructions:&lt;/p&gt;
&lt;h3 id=&#34;1-leave-instruction&#34;&gt;1. &lt;code&gt;leave&lt;/code&gt; Instruction
&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;leave&lt;/code&gt; instruction is equivalent to:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;mov esp, ebp
pop ebp
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mov esp, ebp&lt;/code&gt;: This sets the stack pointer (&lt;code&gt;esp&lt;/code&gt;) to the value of the frame pointer (&lt;code&gt;ebp&lt;/code&gt;), restoring the stack pointer to the top of the current stack frame and effectively releasing the space occupied by the current function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop ebp&lt;/code&gt;: This pops the value at the top of the stack and assigns it to the frame pointer (&lt;code&gt;ebp&lt;/code&gt;), thereby restoring the caller&amp;rsquo;s frame pointer. Essentially, it writes the return address into &lt;code&gt;ebp&lt;/code&gt;, meaning it assigns the stack value (usually the caller&amp;rsquo;s frame address) to &lt;code&gt;ebp&lt;/code&gt;, restoring the caller&amp;rsquo;s stack frame.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The effect of &lt;code&gt;leave&lt;/code&gt; is to restore &lt;code&gt;esp&lt;/code&gt; to its state before the function was called and to pop the saved &lt;code&gt;ebp&lt;/code&gt;. If &lt;code&gt;ebp&lt;/code&gt; has been overwritten to point to a special address (such as an address within the buffer), it can result in an incorrect stack pointer location during function return.&lt;/p&gt;
&lt;h3 id=&#34;2-ret-instruction&#34;&gt;2. &lt;code&gt;ret&lt;/code&gt; Instruction
&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;ret&lt;/code&gt; instruction pops an address off the top of the stack and jumps to that address:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;pop eip
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If the return address has been overwritten with the address of the &lt;code&gt;bar&lt;/code&gt; function, the execution flow will jump to &lt;code&gt;bar&lt;/code&gt;, allowing an attacker to run arbitrary code. Essentially, &lt;code&gt;ret&lt;/code&gt; pops an address into the instruction pointer (&lt;code&gt;eip&lt;/code&gt;) and jumps to that address to continue execution.&lt;/p&gt;
&lt;h2 id=&#34;attack-steps&#34;&gt;Attack Steps
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;When the command &lt;code&gt;perl -e &#39;system &amp;quot;./obo&amp;quot;, &amp;quot;\x38\x84\x04\x08&amp;quot;x256&#39;&lt;/code&gt; is executed, the program takes these repeated bytes as the input to &lt;code&gt;./obo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;As the &lt;code&gt;foo&lt;/code&gt; function returns, the &lt;code&gt;leave&lt;/code&gt; and &lt;code&gt;ret&lt;/code&gt; instructions are executed, leading to the return address being overwritten. This causes the program to jump to the &lt;code&gt;bar&lt;/code&gt; function, printing the success message multiple times.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;further-analysis-determining-effective-overwrite-locations&#34;&gt;Further Analysis: Determining Effective Overwrite Locations
&lt;/h2&gt;&lt;h2 id=&#34;stack-frame-layout-explanation&#34;&gt;Stack Frame Layout Explanation
&lt;/h2&gt;&lt;p&gt;During the GDB debugging session, the memory layout for the stack frame of the &lt;code&gt;foo&lt;/code&gt; function looks like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;0xbfffed10   return address
0xbfffed0c   saved frame pointer (ebp)
0xbfffed0b   buf[1023]
...
0xbfffed03   buf[1015]
0xbfffed02   buf[1014]
0xbfffed01   buf[1013]
0xbfffed00   buf[1012]
...
0xbfffe90c   buf[0]
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Return address&lt;/strong&gt;: Located at &lt;code&gt;0xbfffed10&lt;/code&gt;, this is the address that the program will jump to after the &lt;code&gt;foo&lt;/code&gt; function finishes executing. Overwriting this address can control the flow of the program and potentially redirect it to malicious code (e.g., the &lt;code&gt;bar&lt;/code&gt; function).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Saved frame pointer (&lt;code&gt;ebp&lt;/code&gt;)&lt;/strong&gt;: Stored at &lt;code&gt;0xbfffed0c&lt;/code&gt;, this value is used to restore the calling function&amp;rsquo;s stack frame after &lt;code&gt;foo&lt;/code&gt; finishes. In this example, we can see how the off-by-one overflow can overwrite the least significant byte of &lt;code&gt;ebp&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Buffer (&lt;code&gt;buf&lt;/code&gt;)&lt;/strong&gt;: The buffer starts at address &lt;code&gt;0xbfffe90c&lt;/code&gt; and extends to &lt;code&gt;0xbfffed0b&lt;/code&gt;, with &lt;code&gt;buf[0]&lt;/code&gt; located at &lt;code&gt;0xbfffe90c&lt;/code&gt; and &lt;code&gt;buf[1023]&lt;/code&gt; at &lt;code&gt;0xbfffed0b&lt;/code&gt;. The vulnerable line in the code, &lt;code&gt;buf[sizeof(buf)] = &#39;\0&#39;;&lt;/code&gt;, writes a null terminator (&lt;code&gt;\0&lt;/code&gt;) just outside the bounds of this buffer, affecting the saved frame pointer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the off-by-one overflow scenario, the write operation overwrites the least significant byte of &lt;code&gt;ebp&lt;/code&gt;, which is stored at &lt;code&gt;0xbfffed0c&lt;/code&gt;. By manipulating the value of &lt;code&gt;ebp&lt;/code&gt;, we can influence the stack behavior when the &lt;code&gt;leave&lt;/code&gt; and &lt;code&gt;ret&lt;/code&gt; instructions are executed, eventually allowing us to control the program flow and redirect execution to the &lt;code&gt;bar&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;To perform a successful attack, it&amp;rsquo;s crucial to determine precisely which bytes need to be overwritten in order to manipulate the control flow effectively. In this example, the overflow occurs when &lt;code&gt;buf[sizeof(buf)] = &#39;\0&#39;&lt;/code&gt; is executed, causing the least significant byte of the saved frame pointer (&lt;code&gt;ebp&lt;/code&gt;) to be set to &lt;code&gt;0&lt;/code&gt;. Thus, the value of &lt;code&gt;ebp&lt;/code&gt; needs to be adjusted to ensure it points back into the buffer area, allowing the execution to proceed in the desired way and eventually jump to the &lt;code&gt;bar&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Based on further analysis and testing, the following insights were obtained:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To accurately determine the overwrite location, the value of &lt;code&gt;ebp&lt;/code&gt; is crucial. However, obtaining this value is challenging because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GDB debugging affects address layout.&lt;/li&gt;
&lt;li&gt;The length of the input parameter affects the address layout.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under GDB debugging, the layout within the &lt;code&gt;foo&lt;/code&gt; function looks like this:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After executing &lt;code&gt;buf[sizeof(buf)] = &#39;\0&#39;;&lt;/code&gt;, &lt;code&gt;ebp&lt;/code&gt; is modified such that the return address effectively takes the value at &lt;code&gt;ebp + 1&lt;/code&gt;, which is the address &lt;code&gt;0xbfffed00 + 1&lt;/code&gt;, or &lt;code&gt;0xbfffed04&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The corresponding offset is at position 255 in &lt;code&gt;buf&lt;/code&gt;, meaning the attack can be constructed by filling in the return address only at that specific location. The following command was used for verification in GDB:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;perl -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print  &amp;#34;\x01\x01\x01\x01&amp;#34;x254 . &amp;#34;\x38\x84\x04\x08&amp;#34;x1 . &amp;#34;\x01\x01\x01\x01&amp;#34;x1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This was verified to work under GDB debugging, with some details to note:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The input parameter length must always be 256 bytes; otherwise, the value of &lt;code&gt;ebp&lt;/code&gt; will change, as the input parameter occupies stack space, affecting the starting position of the frame and thereby affecting the value of &lt;code&gt;ebp&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Padding must use non-zero values such as &lt;code&gt;0x01&lt;/code&gt;, because &lt;code&gt;strncpy&lt;/code&gt; will terminate early if it encounters a &lt;code&gt;0&lt;/code&gt; value.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When executing the program directly (i.e., without GDB), the memory layout differs, resulting in a different offset position. Through experimentation, it was found that the offset is at position 235. The corresponding attack command is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./obo &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;perl -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print  &amp;#34;\x01\x01\x01\x01&amp;#34;x234 . &amp;#34;\x38\x84\x04\x08&amp;#34;x1 . &amp;#34;\x01\x01\x01\x01&amp;#34;x21&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This achieves the desired effect of accurately finding the overwrite location and successfully executing the attack.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Convert ChatGPT Formula Format to Obsidian-Compatible Format</title>
        <link>https://example.org/post/2024/10/obsidian-latex-fix/</link>
        <pubDate>Mon, 14 Oct 2024 15:24:21 +0000</pubDate>
        
        <guid>https://example.org/post/2024/10/obsidian-latex-fix/</guid>
        <description>&lt;p&gt;The formulas generated by ChatGPT use the following format:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;\[
Formula Content
\]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, Obsidian renders formulas using the following format:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$$
Formula Content
$$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When copying a formula from ChatGPT to Obsidian, this difference prevents proper rendering.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution
&lt;/h2&gt;&lt;p&gt;We can create a script for Obsidian to automatically replace the formula format when pasting.&lt;/p&gt;
&lt;h3 id=&#34;1-create-the-script&#34;&gt;1. Create the Script
&lt;/h3&gt;&lt;p&gt;We can solve this issue using a plugin in Obsidian.&lt;/p&gt;
&lt;p&gt;In your vault, create a file named &lt;code&gt;fixlatex.js&lt;/code&gt; under the &lt;code&gt;template&lt;/code&gt; directory, and input the following content:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;quickAddApi&lt;/span&gt; } &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Get clipboard content
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clipboardContent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;quickAddApi&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;utility&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getClipboard&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Check if content was successfully retrieved
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;clipboardContent&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Notice&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clipboard is empty or inaccessible.&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;modifiedContent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clipboardContent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#a6e22e&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;/\\\[|\\\]/g&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$$$$&amp;#39;&lt;/span&gt;)              &lt;span style=&#34;color:#75715e&#34;&gt;// Convert \[ \] to $$ $$
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        .&lt;span style=&#34;color:#a6e22e&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;/\\\(\s*|\s*\\\)/g&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$$&amp;#39;&lt;/span&gt;);       &lt;span style=&#34;color:#75715e&#34;&gt;// Convert \( \) to $
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Write the modified content back to the clipboard
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;navigator&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;clipboard&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;writeText&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;modifiedContent&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Notice&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clipboard content has been processed and modified!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-set-up-the-script-in-quickadd&#34;&gt;2. Set Up the Script in QuickAdd
&lt;/h3&gt;&lt;p&gt;Install the QuickAdd plugin and create a &lt;code&gt;Macro&lt;/code&gt;, configuring it as shown below, then save it. The first step in the Macro is to execute our user script &lt;code&gt;fixlatex.js&lt;/code&gt;, the second step is to wait for 100 milliseconds, and the third step is to execute the paste action.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/grA8L8V.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-set-sidebar-shortcut-in-commander&#34;&gt;3. Set Sidebar Shortcut in Commander
&lt;/h3&gt;&lt;p&gt;Install the Commander plugin and set up the QuickAdd action we just created as a sidebar shortcut. You can also skip this step and directly use an Obsidian command to execute this action.&lt;/p&gt;
&lt;h3 id=&#34;4-verify-the-effect&#34;&gt;4. Verify the Effect
&lt;/h3&gt;&lt;p&gt;Now, on the ChatGPT webpage (currently there seems to be an issue when clicking the copy button in the app), click the copy button, then in Obsidian, click the sidebar shortcut or manually execute the QuickAdd command. This will copy the content from ChatGPT to Obsidian and automatically convert the LaTeX format.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>About Me</title>
        <link>https://example.org/post/2024/10/aboutme/</link>
        <pubDate>Fri, 11 Oct 2024 20:55:23 +0000</pubDate>
        
        <guid>https://example.org/post/2024/10/aboutme/</guid>
        <description>&lt;h1 id=&#34;about-me&#34;&gt;About Me
&lt;/h1&gt;&lt;p&gt;Written on October 11, 2024, in Dublin, Ireland.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;self-introduction&#34;&gt;Self Introduction
&lt;/h2&gt;&lt;p&gt;Hello everyone, my name is Nansen Li, previously known as Nan Li. I&amp;rsquo;m from China and a technology-loving engineer. I hold a bachelor&amp;rsquo;s degree in Mechatronic Engineering and two master&amp;rsquo;s degrees in Computer Science. I previously worked as a Go Language Engineer at a major internet company in China, and I am currently pursuing a master&amp;rsquo;s degree at a university in Dublin. I plan to develop my career in Ireland afterward.&lt;/p&gt;
&lt;p&gt;I am deeply interested in frontend and backend development, system architecture, algorithms, game development, and generative AI. I&amp;rsquo;ve always been dedicated to improving my programming skills and enjoy experimenting with new technologies, keeping myself sensitive to industry trends.&lt;/p&gt;
&lt;p&gt;If you share similar interests in technology or lifestyle, feel free to reach out to me. We could discuss and exchange ideas together.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>My Blog</title>
        <link>https://example.org/post/2024/10/myblog/</link>
        <pubDate>Thu, 10 Oct 2024 21:06:19 +0000</pubDate>
        
        <guid>https://example.org/post/2024/10/myblog/</guid>
        <description>&lt;p&gt;I am Nansen Li, and this is my first note. I donâ€™t know how much I can document, nor how long I can keep this up, but I will do my best to stay consistent with my entries.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At 1:20 AM on October 11, 2024, Dublin, Ireland&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Archives</title>
        <link>https://example.org/page/archives/</link>
        <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
        
        <guid>https://example.org/page/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>Search</title>
        <link>https://example.org/page/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.org/page/search/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
