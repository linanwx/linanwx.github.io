<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Concurrent Programming on Nansen Li&#39;s Blog
ÊùéÊ•†Ê£ÆÁöÑÂçöÂÆ¢
</title>
        <link>https://nansenli.com/categories/concurrent-programming/</link>
        <description>Recent content in Concurrent Programming on Nansen Li&#39;s Blog
ÊùéÊ•†Ê£ÆÁöÑÂçöÂÆ¢
</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Nansen Li üåà ÔºàÊùéÊ•†Ê£ÆÔºâ</copyright>
        <lastBuildDate>Sun, 18 Mar 2018 08:29:00 +0000</lastBuildDate><atom:link href="https://nansenli.com/categories/concurrent-programming/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Linux Multithreaded Server Programming Basics: C&#43;&#43;11 Concurrent Programming</title>
        <link>https://nansenli.com/post/jianshu/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80-c&#43;&#43;-11-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/</link>
        <pubDate>Sun, 18 Mar 2018 08:29:00 +0000</pubDate>
        
        <guid>https://nansenli.com/post/jianshu/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80-c&#43;&#43;-11-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/</guid>
        <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;Previous versions of C++ didn&amp;rsquo;t support threads natively. Instead, you had to use libraries like pthread. Using C++&amp;rsquo;s built-in thread support makes programs more unified and concise.&lt;/p&gt;
&lt;h2 id=&#34;header-files&#34;&gt;Header Files
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;thread&amp;gt;&lt;/code&gt;: This header file contains the std::thread and std::this_thread classes, along with functions for managing threads. It&amp;rsquo;s the main file for implementing threads.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;atomic&amp;gt;&lt;/code&gt;: This header file contains std::atomic and std::atomic_flag classes, which are the main files for implementing atomic operations.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;mutex&amp;gt;&lt;/code&gt;: Contains mutex-related classes and functions.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;future&amp;gt;&lt;/code&gt;: Contains the future class and related functions.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;condition_variable&amp;gt;&lt;/code&gt;: Contains condition variable classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are the thread-related parts of C++11. Although there are many debates about pthread versus C++ thread, the cross-platform C++ thread seems to be more standard.&lt;/p&gt;
&lt;p&gt;Recommended book for learning C++11 threads:
&lt;a class=&#34;link&#34; href=&#34;https://www.gitbook.com/book/chenxiaowei/cpp_concurrency_in_action/details&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.gitbook.com/book/chenxiaowei/cpp_concurrency_in_action/details&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;hello-world-thread&#34;&gt;Hello World Thread
&lt;/h2&gt;&lt;p&gt;A simple introduction to the thread class:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;thread&amp;gt;

using namespace std;
// This function is the thread task we want to run
void hello()
{
    printf(&amp;#34;%s&amp;#34;, &amp;#34;hello\n&amp;#34;);
}
// Using the thread class, we pass a function as our initial task
// We can also pass other parameters like classes
int main()
{
    thread t(hello);
    // Using join to wait for completion
    t.join();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Besides join to wait for completion, you can use detach to not wait for the thread to finish.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;struct func
{
  int&amp;amp; i;
  func(int&amp;amp; i_) : i(i_) {}
  void operator() ()
  {
    for (unsigned j=0 ; j&amp;lt;1000000 ; ++j)
    {
      do_something(i);           // 1. Potential access hazard: dangling reference
    }
  }
};

void oops()
{
  int some_local_state=0;
  func my_func(some_local_state);
  std::thread my_thread(my_func);
  my_thread.detach();          // 2. Don&amp;#39;t wait for the thread to finish
}                              // 3. The new thread might still be running
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this example, we&amp;rsquo;ve decided not to wait for the thread to finish (using detach() ‚ë°), so when the oops() function completes ‚ë¢, the new thread might still be running. If the thread is still running, it will call the do_something(i) function ‚ë†, which accesses a variable that has already been destroyed. As with a single-threaded program‚Äîallowing pointers or references to local variables to persist after the function completes has never been a good idea‚Äîthis situation isn&amp;rsquo;t obvious and makes multithreading more error-prone.&lt;/p&gt;
&lt;h2 id=&#34;how-to-wait-for-a-thread-to-complete&#34;&gt;How to Wait for a Thread to Complete?
&lt;/h2&gt;&lt;p&gt;If you need to wait for a thread, the corresponding std::thread instance needs to use join(). In example 2.1, replacing my_thread.detach() with my_thread.join() ensures that local variables are only destroyed after the thread completes. In this case, since the original thread doesn&amp;rsquo;t do much during its lifetime, running the function in a separate thread offers minimal benefit. However, in real programming, either the original thread has its own work to do, or it starts multiple child threads to do useful work and waits for these threads to complete.&lt;/p&gt;
&lt;p&gt;join() is a simple, direct way to wait for a thread to complete or not wait at all. When you need more flexible control over waiting threads, such as checking if a thread has finished or only waiting for a period of time (determining a timeout if exceeded), you need to use other mechanisms like condition variables and futures. Calling join() also cleans up the thread-related storage parts, so the std::thread object is no longer associated with the completed thread. This means you can only use join() once on a thread; once you&amp;rsquo;ve used join(), the std::thread object can&amp;rsquo;t be joined again. When joinable() is used on it, it will return false.&lt;/p&gt;
&lt;h2 id=&#34;passing-parameters-to-threads&#34;&gt;Passing Parameters to Threads
&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void f(int i, std::string const&amp;amp; s);
std::thread t(f, 3, &amp;#34;hello&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The code creates a thread that calls f(3, &amp;ldquo;hello&amp;rdquo;). Note that function f needs a std::string object as its second parameter, but here a string literal is used, which is of type char const *. The conversion from the literal to a std::string object is completed in the thread&amp;rsquo;s context.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to note that the constructor ignores the expected parameter types of the function and blindly copies the provided variables.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void f(int i,std::string const&amp;amp; s);
void oops(int some_param)
{
  char buffer[1024]; // 1
  sprintf(buffer, &amp;#34;%i&amp;#34;,some_param);
  std::thread t(f,3,buffer); // 2
  t.detach();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this case, buffer ‚ë° is a pointer variable pointing to a local variable, and then the local variable is passed to the new thread through buffer ‚ë°. Furthermore, the function is very likely to crash (oops) before the literal is converted to a std::string object, resulting in undefined behavior. And even if you want to rely on implicit conversion to convert the literal to the std::string object that the function expects, since std::thread&amp;rsquo;s constructor copies the provided variables, it only copies the unconverted string literal.
The solution is to convert the literal to a std::string object before passing it to the std::thread constructor:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void f(int i,std::string const&amp;amp; s);
void not_oops(int some_param)
{
  char buffer[1024];
  sprintf(buffer,&amp;#34;%i&amp;#34;,some_param);
  std::thread t(f,3,std::string(buffer));  // Use std::string to avoid dangling pointers
  t.detach();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Example 2:
You might also encounter the opposite situation: expecting to pass a reference, but the entire object is copied. This can happen when a thread updates a data structure passed by reference, such as:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void update_data_for_widget(widget_id w,widget_data&amp;amp; data); // 1
void oops_again(widget_id w)
{
  widget_data data;
  std::thread t(update_data_for_widget,w,data); // 2
  display_status();
  t.join();
  process_widget_data(data); // 3
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;using-mutexes&#34;&gt;Using Mutexes
&lt;/h2&gt;&lt;p&gt;In C++, you create a mutex by instantiating std::mutex and lock it by calling the member function lock(), and unlock it with unlock(). However, direct calling of member functions is not recommended in practice, as it means you must remember to call unlock() at every function exit, including exception cases. The C++ standard library provides a RAII syntax template class std::lock_guard for mutexes, which provides a locked mutex when constructed and unlocks it when destructed, ensuring that a locked mutex is always correctly unlocked. The following program listing shows how to use a std::lock_guard instance constructed with std::mutex to protect access to a list in a multithreaded program. Both std::mutex and std::lock_guard are declared in the &lt;!-- raw HTML omitted --&gt; header file.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;list&amp;gt;
#include &amp;lt;mutex&amp;gt;
#include &amp;lt;algorithm&amp;gt;

std::list&amp;lt;int&amp;gt; some_list;    // 1
std::mutex some_mutex;    // 2

void add_to_list(int new_value)
{
  std::lock_guard&amp;lt;std::mutex&amp;gt; guard(some_mutex);    // 3
  some_list.push_back(new_value);
}

bool list_contains(int value_to_find)
{
  std::lock_guard&amp;lt;std::mutex&amp;gt; guard(some_mutex);    // 4
  return std::find(some_list.begin(),some_list.end(),value_to_find) != some_list.end();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Protection of data breaks when one of the member functions returns a pointer or reference to the protected data. Pointers or references with access capability can access (and possibly modify) the protected data without being restricted by the mutex. The design of interfaces that involve mutex-protected data requires careful consideration to ensure that the mutex can lock any access to the protected data, leaving no backdoors.&lt;/p&gt;
&lt;h2 id=&#34;using-locks&#34;&gt;Using Locks
&lt;/h2&gt;&lt;p&gt;Imagine a toy that consists of two parts, both of which must be obtained to play with it. For example, a toy drum requires a drumstick and a drum to play. Now there are two children who both like to play with this toy. When one child has both the drum and the drumstick, they can play freely. When the other child wants to play, they have to wait until the first child is finished. Now imagine that the drum and drumstick are kept in different toy boxes, and both children want to play the drum at the same time. So they go to the toy boxes looking for the drum. One finds the drum, and the other finds the drumstick. Now there&amp;rsquo;s a problem: unless one child decides to let the other play first by giving up their part, if they both hold firmly to their parts without giving them up, neither can play the drum.&lt;/p&gt;
&lt;p&gt;Fortunately, the C++ standard library has a way to solve this problem: std::lock‚Äîit can lock multiple (two or more) mutexes at once without side effects (risk of deadlock).&lt;/p&gt;
&lt;p&gt;How to avoid deadlocks?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Avoid nested locks
The first suggestion is often the simplest: don&amp;rsquo;t acquire a second lock when a thread already has one. If you can stick to this advice, there won&amp;rsquo;t be deadlocks on locks because each thread only holds one lock.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a fixed order to acquire locks
When hard conditions require you to acquire two or more locks, and you can&amp;rsquo;t use std::lock to acquire them in a single operation; it&amp;rsquo;s best to acquire them in a fixed order on each thread.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;synchronization-and-waiting&#34;&gt;Synchronization and Waiting
&lt;/h2&gt;&lt;p&gt;Imagine you&amp;rsquo;re traveling on a night train. How do you get off at the right station at night? One way is to stay awake all night and pay attention to which station you&amp;rsquo;re at. This way, you won&amp;rsquo;t miss your destination, but it will make you very tired. Alternatively, you can look at the timetable, estimate when the train will arrive at your destination, and set an alarm a little earlier, then you can sleep soundly. This method sounds good and doesn&amp;rsquo;t involve missing your station, but when the train is late, you&amp;rsquo;ll be woken up too early. Of course, the battery in your alarm clock might also die, causing you to sleep through your station. The ideal way is, regardless of early or late, to have someone or something wake you up exactly when the train arrives at the station.&lt;/p&gt;
&lt;p&gt;The C++ standard library has two implementations for condition variables: std::condition_variable and std::condition_variable_any. Both implementations are declared in the &amp;lt;condition_variable&amp;gt; header file. Both need to work with a mutex (for synchronization); the former is limited to working with std::mutex, while the latter can work with any mutex that meets minimum standards, hence the _any suffix. Because std::condition_variable_any is more general, there may be additional overhead in terms of size, performance, and system resource usage, so std::condition_variable is generally the preferred type, and we only consider std::condition_variable_any when there are hard requirements for flexibility.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
