<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>缓冲区溢出 on Nansen Li</title>
        <link>https://example.org/zh-cn/tags/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/</link>
        <description>Recent content in 缓冲区溢出 on Nansen Li</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 15 Oct 2024 14:18:44 +0000</lastBuildDate><atom:link href="https://example.org/zh-cn/tags/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Off-by-One 溢出攻击分析</title>
        <link>https://example.org/zh-cn/post/2024/10/oboattact-md/</link>
        <pubDate>Tue, 15 Oct 2024 14:18:44 +0000</pubDate>
        
        <guid>https://example.org/zh-cn/post/2024/10/oboattact-md/</guid>
        <description>&lt;h1 id=&#34;off-by-one-溢出攻击分析&#34;&gt;Off-by-One 溢出攻击分析
&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;上周，我参加了一门安全课程，其中包含了一个 off-by-one 溢出漏洞的示例。以下是原始代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 简单的 off-by-one 溢出示例 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;input) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;strncpy&lt;/span&gt;(buf, input, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(buf));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  buf[&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(buf)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I&amp;#39;ve been hacked&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (argc &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage: %s input_string&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(EXIT_FAILURE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;利用此漏洞的攻击命令是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perl -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;system &amp;#34;./obo&amp;#34;, &amp;#34;\x38\x84\x04\x08&amp;#34;x256&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行此命令的结果是屏幕上打印出多行 &lt;code&gt;I&#39;ve been hacked&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;分析&#34;&gt;分析
&lt;/h2&gt;&lt;p&gt;当程序进入 &lt;code&gt;foo&lt;/code&gt; 函数时，内存布局如下（使用 GDB 观察到）：&lt;/p&gt;
&lt;p&gt;从上到下，布局包含返回地址、保存的帧指针（saved frame pointer）和缓冲区 (&lt;code&gt;buf&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;当执行 &lt;code&gt;buf[sizeof(buf)] = &#39;\0&#39;;&lt;/code&gt; 时，保存的帧指针 (&lt;code&gt;ebp&lt;/code&gt;) 的最低有效字节被设置为 &lt;code&gt;0&lt;/code&gt;。为了确保 &lt;code&gt;ebp&lt;/code&gt; 在被部分覆盖后仍然指向 &lt;code&gt;buf&lt;/code&gt; 区域内，需要至少 1024 字节的缓冲区。具体来说，需要覆盖 &lt;code&gt;ebp&lt;/code&gt;，使其保持在合理范围内（最高到 &lt;code&gt;0xff&lt;/code&gt;），这就是为什么缓冲区设置为 &lt;code&gt;0xff * 4&lt;/code&gt; 字节的原因。&lt;/p&gt;
&lt;h2 id=&#34;理解-foo-返回时的汇编命令&#34;&gt;理解 &lt;code&gt;foo&lt;/code&gt; 返回时的汇编命令
&lt;/h2&gt;&lt;p&gt;当 &lt;code&gt;foo&lt;/code&gt; 函数返回时，通常会执行以下关键的汇编指令：&lt;/p&gt;
&lt;h3 id=&#34;1-leave-指令&#34;&gt;1. &lt;code&gt;leave&lt;/code&gt; 指令
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;leave&lt;/code&gt; 指令等价于：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;mov esp, ebp
pop ebp
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mov esp, ebp&lt;/code&gt;：将栈指针 (&lt;code&gt;esp&lt;/code&gt;) 设置为帧指针 (&lt;code&gt;ebp&lt;/code&gt;) 的值，恢复栈指针到当前栈帧的顶部，从而释放当前函数占用的空间。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop ebp&lt;/code&gt;：将栈顶的值弹出并赋给帧指针 (&lt;code&gt;ebp&lt;/code&gt;)，从而恢复调用者的帧指针。实际上，相当于将返回地址写入 &lt;code&gt;ebp&lt;/code&gt;，这意味着将栈中的值（通常是调用者的帧地址）赋给 &lt;code&gt;ebp&lt;/code&gt;，从而恢复调用者的栈帧。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;leave&lt;/code&gt; 的作用是将 &lt;code&gt;esp&lt;/code&gt; 恢复到函数调用前的位置，并弹出保存的 &lt;code&gt;ebp&lt;/code&gt;。如果 &lt;code&gt;ebp&lt;/code&gt; 被覆盖为指向某个特殊地址（例如缓冲区内的地址），在函数返回时可能导致错误的栈指针位置。&lt;/p&gt;
&lt;h3 id=&#34;2-ret-指令&#34;&gt;2. &lt;code&gt;ret&lt;/code&gt; 指令
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ret&lt;/code&gt; 指令从栈顶弹出一个地址并跳转到该地址：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;pop eip
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果返回地址被覆盖为 &lt;code&gt;bar&lt;/code&gt; 函数的地址，执行流将跳转到 &lt;code&gt;bar&lt;/code&gt;，允许攻击者执行任意代码。本质上，&lt;code&gt;ret&lt;/code&gt; 会将一个地址弹出到指令指针 (&lt;code&gt;eip&lt;/code&gt;) 并跳转到该地址继续执行。&lt;/p&gt;
&lt;h2 id=&#34;攻击步骤&#34;&gt;攻击步骤
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;当执行命令 &lt;code&gt;perl -e &#39;system &amp;quot;./obo&amp;quot;, &amp;quot;\x38\x84\x04\x08&amp;quot;x256&#39;&lt;/code&gt; 时，程序会将这些重复的字节作为输入传递给 &lt;code&gt;./obo&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;foo&lt;/code&gt; 函数返回时，执行了 &lt;code&gt;leave&lt;/code&gt; 和 &lt;code&gt;ret&lt;/code&gt; 指令，由于返回地址被覆盖，程序跳转到 &lt;code&gt;bar&lt;/code&gt; 函数，打印出成功的消息多次。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进一步分析确定有效的覆盖位置&#34;&gt;进一步分析：确定有效的覆盖位置
&lt;/h2&gt;&lt;p&gt;为了成功执行攻击，关键在于精确确定需要覆盖哪些字节，以有效地操控控制流。在这个例子中，溢出发生在执行 &lt;code&gt;buf[sizeof(buf)] = &#39;\0&#39;&lt;/code&gt; 时，导致保存的帧指针 (&lt;code&gt;ebp&lt;/code&gt;) 的最低有效字节被设置为 &lt;code&gt;0&lt;/code&gt;。因此，需要调整 &lt;code&gt;ebp&lt;/code&gt; 的值，确保其指向缓冲区区域，从而使执行流程按预期进行，最终跳转到 &lt;code&gt;bar&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;基于进一步的分析和测试，得出以下见解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;要准确确定覆盖位置，&lt;code&gt;ebp&lt;/code&gt; 的值至关重要。然而，获得这个值是有挑战的，因为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GDB 调试会影响地址布局。&lt;/li&gt;
&lt;li&gt;输入参数的长度会影响地址布局。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 GDB 调试下，&lt;code&gt;foo&lt;/code&gt; 函数内的布局如下：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行 &lt;code&gt;buf[sizeof(buf)] = &#39;\0&#39;;&lt;/code&gt; 后，&lt;code&gt;ebp&lt;/code&gt; 被修改，使得返回地址实际上取的是 &lt;code&gt;ebp + 1&lt;/code&gt; 处的值，即地址 &lt;code&gt;0xbfffed00 + 1&lt;/code&gt;，也就是 &lt;code&gt;0xbfffed04&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对应的偏移位置在 &lt;code&gt;buf&lt;/code&gt; 的第 255 个位置，这意味着可以通过只在该特定位置填入返回地址来构造攻击。在 GDB 中使用以下命令进行验证：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;perl -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print  &amp;#34;\x01\x01\x01\x01&amp;#34;x254 . &amp;#34;\x38\x84\x04\x08&amp;#34;x1 . &amp;#34;\x01\x01\x01\x01&amp;#34;x1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;经过验证，这在 GDB 调试下是有效的，但需要注意以下细节：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输入参数的长度必须始终为 256 字节，否则 &lt;code&gt;ebp&lt;/code&gt; 的值会发生变化，因为输入参数会占用栈空间，从而影响帧的起始位置，进而影响 &lt;code&gt;ebp&lt;/code&gt; 的值。&lt;/li&gt;
&lt;li&gt;填充必须使用非零值，如 &lt;code&gt;0x01&lt;/code&gt;，因为如果遇到 &lt;code&gt;0&lt;/code&gt; 值，&lt;code&gt;strncpy&lt;/code&gt; 会提前终止。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;直接执行程序时（即不使用 GDB），内存布局不同，导致偏移位置也不同。通过实验，发现偏移位置在第 235 个位置。对应的攻击命令是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./obo &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;perl -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print  &amp;#34;\x01\x01\x01\x01&amp;#34;x234 . &amp;#34;\x38\x84\x04\x08&amp;#34;x1 . &amp;#34;\x01\x01\x01\x01&amp;#34;x21&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样就实现了找到准确覆盖位置并成功执行攻击的效果。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
