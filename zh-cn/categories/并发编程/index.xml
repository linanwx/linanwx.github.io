<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>并发编程 on Nansen Li</title>
        <link>https://nansenli.com/zh-cn/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</link>
        <description>Recent content in 并发编程 on Nansen Li</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Nansen Li 🌈 （李楠森）</copyright>
        <lastBuildDate>Sun, 18 Mar 2018 08:29:00 +0000</lastBuildDate><atom:link href="https://nansenli.com/zh-cn/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Linux多线程服务器编程基础 C&#43;&#43; 11 并发编程学习</title>
        <link>https://nansenli.com/zh-cn/post/jianshu/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80-c&#43;&#43;-11-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/</link>
        <pubDate>Sun, 18 Mar 2018 08:29:00 +0000</pubDate>
        
        <guid>https://nansenli.com/zh-cn/post/jianshu/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80-c&#43;&#43;-11-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/</guid>
        <description>&lt;h2 id=&#34;前言&#34;&gt;前言
&lt;/h2&gt;&lt;p&gt;C++中在以往版本中不支持线程。需要使用pthread之类的使用线程。如果能够使用C++自身的线程则可以使程序变得统一简洁。&lt;/p&gt;
&lt;h2 id=&#34;头文件&#34;&gt;头文件
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt; 该头文件包含有std::thread类与std::this_thread类。以及管理线程的函数。是实现线程的主要文件。&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt; 该头文件包含有std::atomic和std::atomic_flag类，是实现原子操作的的主要文件。&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt; 包含互斥相关的类与函数。&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt; 包含有future类及相关的函数。&lt;/li&gt;
&lt;li&gt;&amp;lt;condition_variable&amp;gt; 包含有条件变量的类。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上就是c++11 的线程部分了。虽然有关pthread与c++ thread有很多争议，但是对于跨平台的c++ thread来说，似乎更为标准一些。&lt;/p&gt;
&lt;p&gt;推荐此书来学习c++11的线程。
&lt;a class=&#34;link&#34; href=&#34;https://www.gitbook.com/book/chenxiaowei/cpp_concurrency_in_action/details&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.gitbook.com/book/chenxiaowei/cpp_concurrency_in_action/details&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;hello-world-线程&#34;&gt;hello world 线程
&lt;/h2&gt;&lt;p&gt;简单认识thread类&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;thread&amp;gt;

using namespace std;
// 下面这个函数是一个我们想要运行的线程任务
void hello()
{
    printf(&amp;#34;%s&amp;#34;, &amp;#34;hello\n&amp;#34;);
}
// 使用thread类，传入一个函数作为我们的初始任务。不仅如此，还能传入类等其他的参数
int main()
{
    thread t(hello);
    // 使用join来等待结束
    t.join();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;除了join来等待结束，可以使用detach来不等待线程结束。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;struct func
{
  int&amp;amp; i;
  func(int&amp;amp; i_) : i(i_) {}
  void operator() ()
  {
    for (unsigned j=0 ; j&amp;lt;1000000 ; ++j)
    {
      do_something(i);           // 1. 潜在访问隐患：悬空引用
    }
  }
};

void oops()
{
  int some_local_state=0;
  func my_func(some_local_state);
  std::thread my_thread(my_func);
  my_thread.detach();          // 2. 不等待线程结束
}                              // 3. 新线程可能还在运行
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个例子中，已经决定不等待线程结束(使用了detach()②)，所以当oops()函数执行完成时③，新线程中的函数可能还在运行。如果线程还在运行，它就会去调用do_something(i)函数①，这时就会访问已经销毁的变量。如同一个单线程程序——允许在函数完成后继续持有局部变量的指针或引用；当然，这从来就不是一个好主意——这种情况发生时，错误并不明显，会使多线程更容易出错。&lt;/p&gt;
&lt;h2 id=&#34;如何等待线程结束&#34;&gt;如何等待线程结束？
&lt;/h2&gt;&lt;p&gt;如果需要等待线程，相关的std::thread实例需要使用join()。清单2.1中，将my_thread.detach()替换为my_thread.join()，就可以确保局部变量在线程完成后，才被销毁。在这种情况下，因为原始线程在其生命周期中并没有做什么事，使得用一个独立的线程去执行函数变得收益甚微，但在实际编程中，原始线程要么有自己的工作要做；要么会启动多个子线程来做一些有用的工作，并等待这些线程结束。&lt;/p&gt;
&lt;p&gt;join()是简单粗暴的等待线程完成或不等待。当你需要对等待中的线程有更灵活的控制时，比如，看一下某个线程是否结束，或者只等待一段时间(超过时间就判定为超时)。想要做到这些，你需要使用其他机制来完成，比如条件变量和期待(futures)。调用join()的行为，还清理了线程相关的存储部分，这样std::thread对象将不再与已经完成的线程有任何关联。这意味着，只能对一个线程使用一次join();一旦已经使用过join()，std::thread对象就不能再次加入了，当对其使用joinable()时，将返回false。&lt;/p&gt;
&lt;h2 id=&#34;向线程传递参数&#34;&gt;向线程传递参数
&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void f(int i, std::string const&amp;amp; s);
std::thread t(f, 3, &amp;#34;hello&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代码创建了一个调用f(3, &amp;ldquo;hello&amp;rdquo;)的线程。注意，函数f需要一个std::string对象作为第二个参数，但这里使用的是字符串的字面值，也就是char const *类型。之后，在线程的上下文中完成字面值向std::string对象的转化。&lt;/p&gt;
&lt;p&gt;需要注意的是，构造函数无视函数期待的参数类型，并盲目的拷贝已提供的变量。&lt;/p&gt;
&lt;p&gt;例如一：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void f(int i,std::string const&amp;amp; s);
void oops(int some_param)
{
  char buffer[1024]; // 1
  sprintf(buffer, &amp;#34;%i&amp;#34;,some_param);
  std::thread t(f,3,buffer); // 2
  t.detach();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种情况下，buffer②是一个指针变量，指向本地变量，然后本地变量通过buffer传递到新线程中②。并且，函数有很有可能会在字面值转化成std::string对象之前崩溃(oops)，从而导致一些未定义的行为。并且想要依赖隐式转换将字面值转换为函数期待的std::string对象，但因std::thread的构造函数会复制提供的变量，就只复制了没有转换成期望类型的字符串字面值。
解决方案就是在传递到std::thread构造函数之前就将字面值转化为std::string对象：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void f(int i,std::string const&amp;amp; s);
void not_oops(int some_param)
{
  char buffer[1024];
  sprintf(buffer,&amp;#34;%i&amp;#34;,some_param);
  std::thread t(f,3,std::string(buffer));  // 使用std::string，避免悬垂指针
  t.detach();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如二：
还可能遇到相反的情况：期望传递一个引用，但整个对象被复制了。当线程更新一个引用传递的数据结构时，这种情况就可能发生，比如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void update_data_for_widget(widget_id w,widget_data&amp;amp; data); // 1
void oops_again(widget_id w)
{
  widget_data data;
  std::thread t(update_data_for_widget,w,data); // 2
  display_status();
  t.join();
  process_widget_data(data); // 3
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;使用互斥&#34;&gt;使用互斥
&lt;/h2&gt;&lt;p&gt;C++中通过实例化std::mutex创建互斥量，通过调用成员函数lock()进行上锁，unlock()进行解锁。不过，不推荐实践中直接去调用成员函数，因为调用成员函数就意味着，必须记住在每个函数出口都要去调用unlock()，也包括异常的情况。C++标准库为互斥量提供了一个RAII语法的模板类std::lock_guard，其会在构造的时候提供已锁的互斥量，并在析构的时候进行解锁，从而保证了一个已锁的互斥量总是会被正确的解锁。下面的程序清单中，展示了如何在多线程程序中，使用std::mutex构造的std::lock_guard实例，对一个列表进行访问保护。std::mutex和std::lock_guard都在&lt;!-- raw HTML omitted --&gt;头文件中声明。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;list&amp;gt;
#include &amp;lt;mutex&amp;gt;
#include &amp;lt;algorithm&amp;gt;

std::list&amp;lt;int&amp;gt; some_list;    // 1
std::mutex some_mutex;    // 2

void add_to_list(int new_value)
{
  std::lock_guard&amp;lt;std::mutex&amp;gt; guard(some_mutex);    // 3
  some_list.push_back(new_value);
}

bool list_contains(int value_to_find)
{
  std::lock_guard&amp;lt;std::mutex&amp;gt; guard(some_mutex);    // 4
  return std::find(some_list.begin(),some_list.end(),value_to_find) != some_list.end();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当其中一个成员函数返回的是保护数据的指针或引用时，会破坏对数据的保护。具有访问能力的指针或引用可以访问(并可能修改)被保护的数据，而不会被互斥锁限制。互斥量保护的数据需要对接口的设计相当谨慎，要确保互斥量能锁住任何对保护数据的访问，并且不留后门。&lt;/p&gt;
&lt;h2 id=&#34;使用锁&#34;&gt;使用锁
&lt;/h2&gt;&lt;p&gt;试想有一个玩具，这个玩具由两部分组成，必须拿到这两个部分，才能够玩。例如，一个玩具鼓，需要一个鼓锤和一个鼓才能玩。现在有两个小孩，他们都很喜欢玩这个玩具。当其中一个孩子拿到了鼓和鼓锤时，那就可以尽情的玩耍了。当另一孩子想要玩，他就得等待另一孩子玩完才行。再试想，鼓和鼓锤被放在不同的玩具箱里，并且两个孩子在同一时间里都想要去敲鼓。之后，他们就去玩具箱里面找这个鼓。其中一个找到了鼓，并且另外一个找到了鼓锤。现在问题就来了，除非其中一个孩子决定让另一个先玩，他可以把自己的那部分给另外一个孩子；但当他们都紧握着自己所有的部分而不给予，那么这个鼓谁都没法玩。&lt;/p&gt;
&lt;p&gt;很幸运，C++标准库有办法解决这个问题，std::lock——可以一次性锁住多个(两个以上)的互斥量，并且没有副作用(死锁风险)。&lt;/p&gt;
&lt;p&gt;如何避免死锁？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;避免嵌套锁
第一个建议往往是最简单的：一个线程已获得一个锁时，再别去获取第二个。如果能坚持这个建议，因为每个线程只持有一个锁，锁上就不会产生死锁。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用固定顺序获取锁
当硬性条件要求你获取两个以上(包括两个)的锁，并且不能使用std::lock单独操作来获取它们;那么最好在每个线程上，用固定的顺序获取它们获取它们(锁)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;同步等待&#34;&gt;同步等待
&lt;/h2&gt;&lt;p&gt;假设你在旅游，而且正在一辆在夜间运行的火车上。在夜间，如何在正确的站点下车呢？一种方法是整晚都要醒着，然后注意到了哪一站。这样，你就不会错过你要到达的站点，但是这样会让你感到很疲倦。另外，你可以看一下时间表，估计一下火车到达目的地的时间，然后在一个稍早的时间点上设置闹铃，然后你就可以安心的睡会了。这个方法听起来也很不错，也没有错过你要下车的站点，但是当火车晚点的时候，你就要被过早的叫醒了。当然，闹钟的电池也可能会没电了，并导致你睡过站。理想的方式是，无论是早或晚，只要当火车到站的时候，有人或其他东西能把你唤醒，就好了。&lt;/p&gt;
&lt;p&gt;C++标准库对条件变量有两套实现：std::condition_variable和std::condition_variable_any。这两个实现都包含在&amp;lt;condition_variable&amp;gt;头文件的声明中。两者都需要与一个互斥量一起才能工作(互斥量是为了同步)；前者仅限于与std::mutex一起工作，而后者可以和任何满足最低标准的互斥量一起工作，从而加上了_any的后缀。因为std::condition_variable_any更加通用，这就可能从体积、性能，以及系统资源的使用方面产生额外的开销，所以std::condition_variable一般作为首选的类型，当对灵活性有硬性要求时，我们才会去考虑std::condition_variable_any。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
